<!DOCTYPE html>
<!-- saved from url=(0167)https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW1 -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Start Developing iOS Apps (Swift): Implement a Custom Control</title>
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/style-1.6.3.css">
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/feedback-1.6.3.css">
   
<meta id="j-version" name="j-version" content="">
<meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42">
<meta id="document-version" name="document-version" content="1.5.3">
<meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Topic/General}">
<meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40015214">
<meta id="chapterId" name="chapterId" content="TP40015214-CH19">
<meta id="book-title" name="book-title" content="Start Developing iOS Apps (Swift)">
<meta id="book-resource-type" name="book-resource-type" content="Guide">
<meta id="book-root" name="book-root" content="./">
<meta id="book-json" name="book-json" content="book.json">
<meta id="date" name="date" content="2016-12-08">
<meta id="description" name="description" content="A hands-on introduction to iOS app development using Swift.">
<meta id="IndexTitle" name="IndexTitle" content="">
<meta id="resources-uri" name="resources-uri" content="../../../Resources/1282">
<link id="book-index-page" rel="Start" title="" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html">
<!-- , next_chapter: next_chapter, previous_chapter: previous_chapter -->
<link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html">
<link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html">
<meta id="devcenter" name="devcenter" content="&lt;!-- DEVCENTER_NAME --&gt;">
<meta id="devcenter-url" name="devcenter-url" content="&lt;!-- DEVCENTER_URL --&gt;">
<meta id="reflib" name="reflib" content="&lt;!-- REFLIB_NAME --&gt;">

<meta id="xcode-display" name="xcode-display" content="render">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
<meta id="platforms" name="platforms" content="iOS">
</head>

  <body id="roadmap" class="jazz">
    
    <header id="ios_header" class="hideOnPrint hideInXcode">
  <div class="content-wrapper">
    <p class="header-text">
    	<a href="https://developer.apple.com/library/archive/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true">Documentation Archive
 		</a>
 </p>
    <p id="wwdr"><img id="apple_logo" src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/apple2.png" height="14px" width="12px" aria-hidden="true"><a href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true">Developer</a></p>
  </div>
</header>

    <section id="valence">
  <div class="content-wrapper">
	<p id="hierarchial_navigation">
		<span id="book_title">Start Developing iOS Apps (Swift)</span>
	</p>
	<form id="search" class="hideInXcode" method="get" action="https://developer.apple.com/search/index.php" accept-charset="utf-8" autocomplete="off">
  <input type="search" id="ssi_SearchField" placeholder="Search Documentation Archive" name="q" autocomplete="off" tabindex="2">
</form>

	  
   
   



    <img id="shortstack" src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/shortstack_2x.png">
  </div>
</section>
    <div class="content-wrapper">
      <nav id="navigator" class="book-parts hideInXcode" role="navigation">
    <ul class="nav-parts">
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_1&quot;;return this.s_oc?this.s_oc(e):true">Getting Started</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_2&quot;;return this.s_oc?this.s_oc(e):true">Jump Right In<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name nav-part-active open-part">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_1&quot;;return this.s_oc?this.s_oc(e):true">Building the UI</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_2&quot;;return this.s_oc?this.s_oc(e):true">Build a Basic UI<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH22-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_1&quot;;return this.s_oc?this.s_oc(e):true">Connect the UI to Code<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH6-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_1&quot;;return this.s_oc?this.s_oc(e):true">Work with View Controllers<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter nav-current-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_1&quot;;return this.s_oc?this.s_oc(e):true">Implement a Custom Control<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH20-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_1&quot;;return this.s_oc?this.s_oc(e):true">Define Your Data Model<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_2&quot;;return this.s_oc?this.s_oc(e):true">Working with Table Views</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_3&quot;;return this.s_oc?this.s_oc(e):true">Create a Table View<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementNavigation.html#//apple_ref/doc/uid/TP40015214-CH16-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH16-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_2&quot;;return this.s_oc?this.s_oc(e):true">Implement Navigation<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementEditAndDeleteBehavior.html#//apple_ref/doc/uid/TP40015214-CH9-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH9-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_3&quot;;return this.s_oc?this.s_oc(e):true">Implement Edit and Delete Behavior<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/PersistData.html#//apple_ref/doc/uid/TP40015214-CH14-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH14-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/P_1&quot;;return this.s_oc?this.s_oc(e):true">Persist Data<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_1&quot;;return this.s_oc?this.s_oc(e):true">What’s Next?</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_2&quot;;return this.s_oc?this.s_oc(e):true">Where to Go from Here<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_1&quot;;return this.s_oc?this.s_oc(e):true">iOS and Swift Terminology</a>
          <ul class="nav-chapters">
              <li class="glossary nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_2&quot;;return this.s_oc?this.s_oc(e):true">Glossary<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li data-id="revision-history" class="part-name">
          <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_3&quot;;return this.s_oc?this.s_oc(e):true">Revision History</a>
          <ul class="nav-chapters">
            <li class="nav-chapter">
              <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_4&quot;;return this.s_oc?this.s_oc(e):true">Document Revision History</a>
            </li>
          </ul>
        </li>
    </ul>
</nav>

      <menu id="bashful" type="toolbar">
  <div class="shield"></div>
  <menuitem id="jump_to" class="menu-bar-item closed">
  <span>On This Page</span>
  <div class="chevron">
    <div class="chevy chevron-left"></div>
    <div class="chevy chevron-right"></div>
  </div>
  <menu type="list" class="details">
      <ul class="list-bullet">
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW2" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_4&quot;;return this.s_oc?this.s_oc(e):true">Learning Objectives</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW3" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_5&quot;;return this.s_oc?this.s_oc(e):true">Create a Custom View</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW5" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_6&quot;;return this.s_oc?this.s_oc(e):true">Display the Custom View</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW8" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_7&quot;;return this.s_oc?this.s_oc(e):true">Add Buttons to the View</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_8" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_8&quot;;return this.s_oc?this.s_oc(e):true">Add Support for Interface Builder</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW4" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_9&quot;;return this.s_oc?this.s_oc(e):true">Add Star Images to the Buttons</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW10" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_10&quot;;return this.s_oc?this.s_oc(e):true">Implement the Button Action</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_9" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_11&quot;;return this.s_oc?this.s_oc(e):true">Add Accessibility Information</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW12" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_12&quot;;return this.s_oc?this.s_oc(e):true">Connect the Rating Control to the View Controller</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW7" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_13&quot;;return this.s_oc?this.s_oc(e):true">Clean Up the Project</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_10" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_14&quot;;return this.s_oc?this.s_oc(e):true">Wrapping Up</a>
          </li>
      </ul>
  </menu>
</menuitem>

</menu>
<div class="pixel-line"></div>
<div class="rubber-band-gap"></div>
<article class="chapter">
  <a name="//apple_ref/doc/uid/TP40015214-CH19"></a><a name="//apple_ref/doc/uid/TP40015214-CH19-SW1"></a>
  <h2 class="chapter-name chapter-name-short">Implement a Custom Control</h2>
  
  	<section class="section">
  		<p class="para">
  In this lesson, you’ll implement a custom rating control for the FoodTracker app, and add it to the scene. 
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_sim_finalUI_2x.png" alt="image: ../Art/ICC_sim_finalUI_2x.png" width="387" height="679">
</figure>

		</section> 
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW2"></a>
  <h3 class="section-name" tabindex="0">Learning Objectives</h3>
  <p class="para">
  At the end of the lesson, you’ll be able to:
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  Create and associate custom&nbsp;source code&nbsp;files with elements in a storyboard
</p>
</li><li class="item"><p class="para">
  Define a custom class
</p>
</li><li class="item"><p class="para">
  Implement an initializer on a custom class
</p>
</li><li class="item"><p class="para">
  Use <code class="code-voice">UIStackView</code>&nbsp;as a container
</p>
</li><li class="item"><p class="para">
  Understand how to create views programmatically
</p>
</li><li class="item"><p class="para">
  Add accessibility information to a custom control
</p>
</li><li class="item"><p class="para">
  Work with <code class="code-voice">@IBInspectable</code> and <code class="code-voice">@IBDesignable</code> to display and control a custom view in Interface Builder
</p>
</li>
</ul>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW3"></a>
  <h3 class="section-name" tabindex="0">Create a Custom View</h3>
  <p class="para">
  To be able to rate a meal, users need a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW17" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW17" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_3&quot;;return this.s_oc?this.s_oc(e):true">control</a></span> that lets them select the number of stars they want to assign to the meal. There are many ways to implement this, but this lesson focuses on a straightforward approach, building a custom control by combining existing views and controls. You’ll create a stack view subclass that manages a row of buttons representing the stars. You’ll define your custom control entirely in code, and then add it to your <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW8" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW8" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_4&quot;;return this.s_oc?this.s_oc(e):true">storyboard</a></span>.
</p><p class="para">
  The rating control appears as a row of stars.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_ratingcontrol_2x.png" alt="image: ../Art/ICC_ratingcontrol_2x.png" width="337" height="70">
</figure><p class="para">
  Users can choose a rating for a meal. When a user taps a star, that star and the stars preceding it are filled in. If the user taps the rightmost filled in star (the star associated with the current rating), the rating is cleared and all stars are displayed as empty. 
</p><p class="para">
  To begin designing the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW18" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW18" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_5&quot;;return this.s_oc?this.s_oc(e):true">user interface (UI)</a></span>, interaction, and behavior of this control, start by creating a custom stack view (<code class="code-voice">UIStackView</code>) <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW14" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW14" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_6&quot;;return this.s_oc?this.s_oc(e):true">subclass</a></span>.
</p><p class="para">
  <strong class="inline-head">To create a subclass of UIStackView</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Choose File &gt; New &gt; File (or press Command-N).
</p>
</li><li class="item"><p class="para">
  At the top of the dialog that appears, select iOS.
</p>
</li><li class="item"><p class="para">
  Select Cocoa Touch Class, and click Next.
</p>
</li><li class="item"><p class="para">
  In the Class field, type <code class="code-voice">RatingControl</code>.
</p>
</li><li class="item"><p class="para">
  In the “Subclass of” field, select <code class="code-voice">UIStackView</code>.
</p>
</li><li class="item"><p class="para">
  Make sure the Language option is set to Swift.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_newviewclass_2x.png" alt="image: ../Art/ICC_newviewclass_2x.png" width="680" height="486">
</figure>
</li><li class="item"><p class="para">
  Click Next.
</p>
<p class="para">
  The save location defaults to your project directory.
</p>
<p class="para">
  The Group option defaults to your app name, FoodTracker.
</p>
<p class="para">
  In the Targets section, your app is selected and the tests for your app are unselected.
</p>
</li><li class="item"><p class="para">
  Leave these defaults as they are, and click Create.
</p>
<p class="para">
  Xcode creates a file that defines the <code class="code-voice">RatingControl</code> class: <code class="code-voice">RatingControl.swift</code>. <code class="code-voice">RatingControl</code> is a custom view subclass of <code class="code-voice">UIView</code>.
</p>
</li><li class="item"><p class="para">
  If necessary, in the Project navigator, drag the <code class="code-voice">RatingControl.swift</code> file so that it’s positioned under the other Swift files.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_dragfile_2x.png" alt="image: ../Art/ICC_dragfile_2x.png" width="272" height="279">
</figure>
</li><li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, delete the comments that come with the template <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW44" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW44" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_7&quot;;return this.s_oc?this.s_oc(e):true">implementation</a></span> so you can start working with a blank slate.
</p>
<p class="para">
  The implementation should look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">import</span> <span class="vc">UIKit</span></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">RatingControl</span>: <span class="n"><!-- a href="" -->UIStackView<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  You typically create a view in one of two ways: by programatically <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW2" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW2" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_8&quot;;return this.s_oc?this.s_oc(e):true">initializing</a></span> the view, or by allowing the view to be loaded by the storyboard. There’s a corresponding initializer for each approach: <code class="code-voice">init(frame:)</code> for programatically initializing the view and <code class="code-voice">init?(coder:)</code> for loading the view from the storyboard. Recall that an <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW2" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW2" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_9&quot;;return this.s_oc?this.s_oc(e):true">initializer</a></span> is a method that prepares an instance of a class for use, which involves setting an initial value for each property and performing any other setup.
</p><p class="para">
  You will need to implement both of these methods in your custom control. While designing the app, Interface Builder programatically instantiates the view when you add it to the canvas. At runtime, your app loads the view from the storyboard.
</p><p class="para">
  <strong class="inline-head">To override the initializers</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, under the <code class="code-voice">class</code> line, add this comment.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Initialization</span></code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Below the comment, start typing <code class="code-voice">init</code>. Stop typing when the code completion overlay shows up.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_init_codecompletion_2x.png" alt="image: ../Art/ICC_init_codecompletion_2x.png" width="680" height="370">
</figure>
</li><li class="item"><p class="para">
  Select <code class="code-voice">init(frame: CGRect)</code> from the listed options, and press Return.
</p>
<p class="para">
  Xcode inserts the initializer skeleton for you.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">init</span>(<span class="vc">frame</span>: <span class="n"><!-- a href="" -->CGRect<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Errors and warnings appear as yellow triangle icons (warnings) and red circles (errors) next to the code. Currently, the <code class="code-voice">init(frame:)</code> method has an error. Click on the error icon to bring up more information about the error.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_init_fixit_2x.png" alt="image: ../Art/ICC_init_fixit_2x.png" width="680" height="388">
</figure>
</li><li class="item"><p class="para">
  Double-click the Fix-it to insert the <code class="code-voice">override</code> keyword.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">override</span> <span class="kt">init</span>(<span class="vc">frame</span>: <span class="n"><!-- a href="" -->CGRect<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  The Swift compiler knows that <code class="code-voice">init(frame:)</code> must be marked as required, and offers a fix-it to make this change in your code. <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW90" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW90" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_10&quot;;return this.s_oc?this.s_oc(e):true">Fix-its</a></span> are provided by the compiler as potential solutions to errors in your code.
</p>
</li><li class="item"><p class="para">
  Add this line to call the superclass’s initializer:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">super</span>.<span class="kt">init</span>(<span class="vc">frame</span>: <span class="vc">frame</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Below the <code class="code-voice">init(frame:)</code> method, start typing <code class="code-voice">init</code> again, and select init(coder: NSCoder) from the code completion options. Press Return. 
</p>
<p class="para">
  Xcode inserts the initializer skeleton for you.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">init</span>(<span class="vc">coder</span>: <span class="n"><!-- a href="" -->NSCoder<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Use the Fix-it to insert the <code class="code-voice">required</code> keyword.
</p>
<div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_30"></a>
  <aside class="aside">
    <p class="aside-title">Note
    </p>
    	<p class="para">Swift handles initializers differently than other methods. If you don’t provide any initializers, Swift classes automatically inherit all of their super class’s designated initializers. If you implement any initializers, you not longer inherit any of the superclasses initializers; however, the superclass can mark one or more of its initializers as <code class="code-voice">required</code>. The subclass must implement (or automatically inherit) all of the required initializers. Furthermore, the subclass must mark their initializers as <code class="code-voice">required</code>, indicating that their subclasses must also implement the initializers.
    	</p>
    
  </aside>
</div>
</li><li class="item"><p class="para">
  Add this line to call the superclass’s initializer.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">super</span>.<span class="kt">init</span>(<span class="vc">coder</span>: <span class="vc">coder</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  The initializers should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">override</span> <span class="kt">init</span>(<span class="vc">frame</span>: <span class="n"><!-- a href="" -->CGRect<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">super</span>.<span class="kt">init</span>(<span class="vc">frame</span>: <span class="vc">frame</span>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">required</span> <span class="kt">init</span>(<span class="vc">coder</span>: <span class="n"><!-- a href="" -->NSCoder<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">super</span>.<span class="kt">init</span>(<span class="vc">coder</span>: <span class="vc">coder</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  Right now, your initializers are placeholders that simply call the superclass’s implementation. You will add additional configuration steps later in this lesson.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW5"></a>
  <h3 class="section-name" tabindex="0">Display the Custom View</h3>
  <p class="para">
  To display your custom control, you need to add a stack view to your storyboard and establish a connection between the stack view and the code you just wrote.
</p><p class="para">
  <strong class="inline-head">To display the view</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open your storyboard.
</p>
</li><li class="item"><p class="para">
  In your storyboard, use the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW54" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW54" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_11&quot;;return this.s_oc?this.s_oc(e):true">Object library</a></span> to find a Horizontal Stack View object, and drag one into your storyboard scene so that it’s in the stack view below the image view.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_addhorizontalstack_2x.png" alt="image: ../Art/ICC_addhorizontalstack_2x.png" width="417" height="712">
</figure>
</li><li class="item"><p class="para">
  With the horizontal stack view selected, open the Identity inspector <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/inspector_identity_2x.png" alt="image: ../Art/inspector_identity_2x.png" width="16" height="16">.
</p>
<p class="para">
  Recall that the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW80" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW80" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_12&quot;;return this.s_oc?this.s_oc(e):true">Identity inspector</a></span> lets you edit properties of an object in your storyboard related to that object’s identity, such as what class the object belongs to.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_inspector_identity_2x.png" alt="image: ../Art/ICC_inspector_identity_2x.png" width="272" height="515">
</figure>
</li><li class="item"><p class="para">
  In the Identity inspector, find the field labeled Class and select <code class="code-voice">RatingControl</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_identity_ratingcontrol_2x.png" alt="image: ../Art/ICC_identity_ratingcontrol_2x.png" width="272" height="477">
</figure>
</li>
</ol>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW8"></a>
  <h3 class="section-name" tabindex="0">Add Buttons to the View</h3>
  <p class="para">
  At this point, you’ve got the basics of a custom <code class="code-voice">UIStackView</code> subclass, called <code class="code-voice">RatingControl</code>. Next, you need to add buttons to your view to allow the user to select a rating. Start with something simple, like getting a single red button to show up in your view.
</p><p class="para">
  <strong class="inline-head">To create a button in your view</strong>
</p><p class="para">
  Make sure the button is added, regardless of which initializer is called. To do this, add a private method, <code class="code-voice">setupButtons()</code>, and call that method from both initializers.
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, under the initializer methods, add this comment.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Private Methods</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Use the space below this comment to create private methods—methods with the <code class="code-voice">private</code> modifier before the <code class="code-voice">func</code> introducer. Private methods can only be called by code within the declaring class. This lets you encapsulate and protect methods, ensuring that they are not unexpectedly or accidentally called from the outside.
</p>
</li><li class="item"><p class="para">
  Under the comment, add the following method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  In the <code class="code-voice">setupButtons()</code> method, add the following lines of code to create a red button:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Create the button</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Here, you are using one of the <code class="code-voice">UIButton</code> class’s convenience initializers. This initializer calls <code class="code-voice">init(frame:)</code> and passes in a zero-sized rectangle. Starting with a zero-sized button is fine, because you’re using Auto Layout. The stack view will automatically define the button’s position, and you will add constraints to define the button’s size.
</p>
<p class="para">
  You are using <code class="code-voice">red</code> so it’s easy to see where the view is. If you’d like, use one of the other predefined <code class="code-voice">UIColor</code> values instead, like <code class="code-voice">blue</code> or <code class="code-voice">green</code>.
</p>
</li><li class="item"><p class="para">
  Below the last line, add the button’s constraints:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  The first line of code disables the button’s automatically generated constraints. When you programmatically instantiate a view, its <code class="code-voice">translatesAutoresizingMaskIntoConstraints</code> property defaults to <code class="code-voice">true</code>. This tells the layout engine to create constraints that define the view’s size and position based on the view’s <code class="code-voice">frame</code> and <code class="code-voice">autoresizingmask</code> properties. Typically, when you are using Auto Layout, you want to replace these autogenerated constraints with your own. To remove the autogenerated constraints, set the <code class="code-voice">translatesAutoresizingMaskIntoConstraints</code> property to <code class="code-voice">false</code>.
</p>
<div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_31"></a>
  <aside class="aside">
    <p class="aside-title">Note
    </p>
    	<p class="para">This line is not strictly necessary. When you add a view to a stack view, the stack view automatically sets the view’s <code class="code-voice">translatesAutoresizingMaskIntoConstraints</code> property to <code class="code-voice">false</code>. However, when using Auto Layout, it’s a good habit to explicitly disable the autogenerated constraints whenever you programmatically create a view. That way you won’t accidentally forget to disable them when it actually matters.
    	</p>
    
  </aside>
</div>
<p class="para">
  The lines starting with <code class="code-voice">button.heightAnchor</code> and <code class="code-voice">button.widthAnchor</code> create the constraints that define the button’s height and width. Each line performs the following steps:
</p>
<ol class="list-number">
  <li class="item"><p class="para">
  The button’s <code class="code-voice">heightAnchor</code> and <code class="code-voice">widthAnchor</code> properties give access to layout anchors. You use layout anchors to create constraints—in this case, constraints that define the view’s height and width, respectively.
</p>
</li><li class="item"><p class="para">
  The anchor’s <code class="code-voice">constraint(equalToConstant:)</code> method returns a constraint that defines a constant height or width for the view.
</p>
</li><li class="item"><p class="para">
  The constraint’s <code class="code-voice">isActive</code> property activates or deactivates the constraint. When you set this property to <code class="code-voice">true</code>, the system adds the constraint to the correct view, and activates it.
</p>
</li>
</ol>
<p class="para">
  Together, these lines define the button as a fixed-size object in your layout (44 point x 44 point). 
</p>
</li><li class="item"><p class="para">
  Finally, add the button to the stack:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice"><span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  The <code class="code-voice">addArrangedSubview()</code> method adds the button you created to the list of views managed by the <code class="code-voice">RatingControl</code> stack view. This action adds the view as a subview of the <code class="code-voice">RatingControl</code>, and also instructs the <code class="code-voice">RatingControl</code> to create the constraints needed to manage the button’s position within the control.
</p>
</li>
</ol><p class="para">
  Your <code class="code-voice">setupButtons()</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">    <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  Now call this method from both initialization methods, as shown below:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">override</span> <span class="kt">init</span>(<span class="vc">frame</span>: <span class="n"><!-- a href="" -->CGRect<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">super</span>.<span class="kt">init</span>(<span class="vc">frame</span>: <span class="vc">frame</span>)</code></li>
            <li><code class="code-voice">    <span class="vc">setupButtons</span>()</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">required</span> <span class="kt">init</span>(<span class="vc">coder</span>: <span class="n"><!-- a href="" -->NSCoder<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">super</span>.<span class="kt">init</span>(<span class="vc">coder</span>: <span class="vc">coder</span>)</code></li>
            <li><code class="code-voice">    <span class="vc">setupButtons</span>()</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint</em>: Run your app. You should be able to see a view with a small red square inside of it. The red square is the button you added in the initializer.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_sim_1redbutton_2x.png" alt="image: ../Art/ICC_sim_1redbutton_2x.png" width="387" height="679">
</figure><p class="para">
  You need to add an action for this button (and for the other buttons you’ll be adding later). Eventually, you will use this button to change the meal’s rating; however, for now you’ll just check that the action is working.
</p><p class="para">
  <strong class="inline-head">To add an action to the button</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, after the <code class="code-voice">//MARK Initialization</code> section, add the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Button Action</span></code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Under the comment, add the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"Button pressed 👍"</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Use the <code class="code-voice">print()</code> function to check that the <code class="code-voice">ratingButtonTapped(_:)</code> action is linked to the button as expected. This function prints a message to the standard output, which in this case is the Xcode debug <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW86" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW86" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_13&quot;;return this.s_oc?this.s_oc(e):true">console</a></span>. The console is a useful debugging mechanism that appears at the bottom of the editor area.
</p>
<p class="para">
  You’ll replace this debugging implementation with a real implementation in a little while.
</p>
</li><li class="item"><p class="para">
  Find the <code class="code-voice">setupButtons()</code> method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">    <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Just above the <code class="code-voice">// Add the button to the stack</code> comment, add the following code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  In the previous lesson, you used the target-action pattern to link elements in your storyboard to action methods in your code. The <code class="code-voice">addTarget(_, action:, for:)</code> method does the same thing in code. You’re attaching the <code class="code-voice">ratingButtonTapped(_:)</code> action method to the <code class="code-voice">button</code> object, which will be triggered whenever the <code class="code-voice">.TouchDown</code> event occurs.
</p>
<p class="para">
  There’s a lot going on in this code. Here’s a breakdown:
</p>
<ul class="list-bullet">
  <li class="item"><p class="para">
  The target is <code class="code-voice">self</code>, which refers to the current instance of the enclosing class. In this case, it refers to the <code class="code-voice">RatingControl</code> object that is setting up the buttons.
</p>
</li><li class="item"><p class="para">
  The <code class="code-voice">#selector</code> expression returns the <code class="code-voice">Selector</code> value for the provided method. A selector is an opaque value that identifies the method. Older APIs used selectors to dynamically invoke methods at runtime. While newer APIs have largely replaced selectors with blocks, many methods—like <code class="code-voice">performSelector(_:)</code> and <code class="code-voice">addTarget(_:action:forControlEvents:)</code>—still take selectors as arguments. In this example, the <code class="code-voice">#selector(RatingControl.ratingButtonTapped(_:))</code> expression returns the selector for your <code class="code-voice">ratingButtonTapped(_:)</code> action method. This lets the system call your action method when the button is tapped.
</p>
</li><li class="item"><p class="para">
  The <code class="code-voice">UIControlEvents</code> option set defines a number of events that controls can respond to. Typically buttons respond to the <code class="code-voice">.touchUpInside</code> event. This occurs when the user touches the button, and then lifts their finger while the finger is still within the button’s bounds. This event has an advantage over <code class="code-voice">.touchDown</code>, because the user can cancel the event by dragging their finger outside the button before lifting it.
</p>
</li><li class="item"><p class="para">
  Note that because you’re not using Interface Builder, you don’t need to define your action method with the <code class="code-voice">IBAction</code> attribute; you just define the action like any other method. You can use a method that takes no arguments, that takes a single sender argument, or that takes both a sender and an event argument.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">doSomething</span>()</code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">doSomething</span>(<span class="vc">sender</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>)</code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">doSomething</span>(<span class="vc">sender</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>, <span class="vc">forEvent</span> <span class="vc">event</span>: <span class="n"><!-- a href="" -->UIEvent<!-- /a --></span>)</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ul>
</li>
</ol><p class="para">
  Your <code class="code-voice">setupButtons()</code> method should now look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">    <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint</em>: Run your app. When you click the red square, you should see the “Button pressed” message in the console.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_console_buttonpressed_2x.png" alt="image: ../Art/ICC_console_buttonpressed_2x.png" width="680" height="467">
</figure><p class="para">
  Now it’s time to think about what pieces of information the <code class="code-voice">RatingControl</code> class needs to have in order to represent a rating. You’ll need to keep track of a rating value, as well as the buttons that a user taps to set that rating. You can represent the rating value with an <code class="code-voice">Int</code>, and the buttons as an array of <code class="code-voice">UIButton</code> objects.
</p><p class="para">
  <strong class="inline-head">To add rating properties</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, find the class declaration line:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">RatingControl</span>: <span class="n"><!-- a href="" -->UIView<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Below this line, add the following code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Properties</span></code></li>
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">var</span> <span class="vc">ratingButtons</span> = [<span class="vc">UIButton</span>]()</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">rating</span> = <span class="m">0</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This creates two properties. The first is a  property that contains the list of buttons. You don’t want to let anything outside the <code class="code-voice">RatingControl</code> class access these buttons; therefore, you declare them as private. 
</p>
<p class="para">
  The Second property contains the control’s rating. You need to be able to both read and write this value from outside this class. By leaving it as internal access (the default), you can access it from any other class inside the app.
</p>
</li>
</ol><p class="para">
  Right now, you have one button in the view, but you need five total. To create a total of five buttons, use a <code class="code-voice">for</code>-<code class="code-voice">in</code> loop. A <code class="code-voice">for</code>-<code class="code-voice">in</code> loop iterates over a sequence, such as ranges of numbers, to execute a set of code multiple times. Instead of creating one button, the loop will create five.
</p><p class="para">
  <strong class="inline-head">To create a total of five buttons</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, find the <code class="code-voice">setupButtons()</code> method, and add a <code class="code-voice">for</code>-<code class="code-voice">in</code> loop around the method’s contents, like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">for</span> <span class="kt">_</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="m">5</span> {</code></li>
            <li><code class="code-voice">    <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">    <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Make sure the lines in the <code class="code-voice">for</code>-<code class="code-voice">in</code> loop are indented properly by selecting all of them and pressing Control-I.
</p>
<p class="para">
  The <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW94" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW94" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_14&quot;;return this.s_oc?this.s_oc(e):true">half-open range operator</a></span> (<code class="code-voice">..&lt;</code>) doesn’t include the upper number, so this range goes from <code class="code-voice">0</code> to <code class="code-voice">4</code> for a total of five loop iterations, drawing five buttons instead of just one. The underscore (<code class="code-voice">_</code>) represents a wildcard, which you can use when you don’t need to know which iteration of the loop is currently executing. 
</p>
</li><li class="item"><p class="para">
  Add the following just above the for-in loop’s closing curly brace (}).
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Add the new button to the rating button array</span></code></li>
            <li><code class="code-voice"><span class="vc">ratingButtons</span>.<span class="vc">append</span>(<span class="vc">button</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  As you create each button, you add it to the <code class="code-voice">ratingButtons</code> array to keep track of it.
</p>
</li>
</ol><p class="para">
  Your <code class="code-voice">setupButtons()</code> method should now look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="kt">_</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="m">5</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">        <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="m">44.0</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">        <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the new button to the rating button array</span></code></li>
            <li><code class="code-voice">        <span class="vc">ratingButtons</span>.<span class="vc">append</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint</em>: Run your app. Notice how the stack view lays out the buttons. They are arranged horizontally, but there’s no space between them—making them look like a single, red block.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_buttonswithoutspace_2x.png" alt="image: ../Art/ICC_buttonswithoutspace_2x.png" width="387" height="679">
</figure><p class="para">
  To fix this, open <code class="code-voice">Main.storyboard</code> and select the <code class="code-voice">RatingControl</code> stack view. Open the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW19" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW19" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_15&quot;;return this.s_oc?this.s_oc(e):true">Attributes inspector</a></span> <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/inspector_attributes_2x.png" alt="image: ../Art/inspector_attributes_2x.png" width="16" height="16">, and set the Spacing attribute to <code class="code-voice">8</code>.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_setstackspacing_2x.png" alt="image: ../Art/ICC_setstackspacing_2x.png" width="272" height="321">
</figure><p class="para">
  <em>Checkpoint</em>: Run your app again. Now, the buttons should be laid out as expected. Note, clicking any of the buttons at this point should still call the <code class="code-voice">ratingButtonTapped(button:)</code> method and log the message to the console. 
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_sim_5redbuttons_2x.png" alt="image: ../Art/ICC_sim_5redbuttons_2x.png" width="387" height="679">
</figure><p class="para">
  To collapse the console, use the Debug area toggle.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/debug_toggle_2x.png" alt="image: ../Art/debug_toggle_2x.png" width="300" height="94">
</figure>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_8"></a>
  <h3 class="section-name" tabindex="0">Add Support for Interface Builder</h3>
  <p class="para">
  If you look at the rating control in Interface Builder, you’ll notice that it’s displayed as a large, empty rectangle. Worse yet, if you select the rating control, its bounding box turns red, indicating that there’s a problem with the control’s layout. In fact, there are two other indications that something might be wrong. There’s a yellow warning triangle in the right side of the Activity viewer. There’s also a red error icon beside the View Controller Scene in the Outline view.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_errorsandwarnings_2x.png" alt="image: ../Art/ICC_errorsandwarnings_2x.png" width="680" height="465">
</figure><p class="para">
  If you click these icons, Xcode shows additional information about the errors and warnings.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_ambiguouslayoutwarning_2x.png" alt="image: ../Art/ICC_ambiguouslayoutwarning_2x.png" width="229" height="165">
</figure><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_missingconstrainterror_2x.png" alt="image: ../Art/ICC_missingconstrainterror_2x.png" width="282" height="149">
</figure><p class="para">
  In both cases, the root cause is the same. Interface Builder does not know anything about the contents of your rating control. To fix this, you define the control as <code class="code-voice">@IBDesignable</code>. This lets Interface Builder instantiate and draw a copy of your control directly in the canvas. Additionally, now that Interface Builder has a live copy of your control, its layout engine can properly position and size the control.
</p><p class="para">
  <strong class="inline-head">To declare the control as @IBDesignable</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, find the class declaration:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">RatingControl</span>: <span class="n"><!-- a href="" -->UIStackView<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Add <code class="code-voice">@IBDesignable</code> to  the beginning of the line as shown:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBDesignable</span> <span class="kt">class</span> <span class="vc">RatingControl</span>: <span class="n"><!-- a href="" -->UIStackView<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Rebuild the project by typing Command-B (or choosing Product &gt; Build).
</p>
</li><li class="item"><p class="para">
  Open <code class="code-voice">Main.storyboard</code>. Once the build completes, the storyboard shows a live view of your rating control.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_designableliveview_2x.png" alt="image: ../Art/ICC_designableliveview_2x.png" width="418" height="712">
</figure>
<p class="para">
  Notice that the canvas now correctly sizes and places your <code class="code-voice">RatingControl</code> view. As a result, the warnings and errors are now gone.
</p>
</li>
</ol><p class="para">
  Interface Builder can do more than just display your custom view. You can also specify properties that can then be set in the Attributes inspector. Add the <code class="code-voice">@IBInspectable</code> attribute to the desired properties. Interface Builder supports the inspection of basic types (and their corresponding optionals), including: Booleans, numbers, strings, as well as <code class="code-voice">CGRect</code>, <code class="code-voice">CGSize</code>, <code class="code-voice">CGPoint</code>, and <code class="code-voice">UIColor</code>.
</p><p class="para">
  <strong class="inline-head">To add inspectable properties</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, add the following properties to the bottom of the <code class="code-voice">//MARK: Properties</code> section:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBInspectable</span> <span class="kt">var</span> <span class="vc">starSize</span>: <span class="n"><!-- a href="" -->CGSize<!-- /a --></span> = <span class="vc">CGSize</span>(<span class="vc">width</span>: <span class="m">44.0</span>, <span class="vc">height</span>: <span class="m">44.0</span>)</code></li>
            <li><code class="code-voice"><span class="kt">@IBInspectable</span> <span class="kt">var</span> <span class="vc">starCount</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span> = <span class="m">5</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  These lines define the size of your buttons and the number of buttons in your control.
</p>
</li><li class="item"><p class="para">
  Now you need to use these values. Locate the <code class="code-voice">setupButtons()</code> method, and make the following changes:
</p>
<ol class="list-number">
  <li class="item"><p class="para">
  In the <code class="code-voice">for</code>-<code class="code-voice">in</code> declaration, change <code class="code-voice">5</code> to <code class="code-voice">starCount</code>.
</p>
</li><li class="item"><p class="para">
  In the <code class="code-voice">button.heightAnchor.constraint()</code> method call, change <code class="code-voice">44.0</code> to <code class="code-voice">starSize.height</code>.
</p>
</li><li class="item"><p class="para">
  In the <code class="code-voice">button.widthAnchor.constraint()</code> method call, change <code class="code-voice">44.0</code> to <code class="code-voice">starSize.width</code>.
</p>
</li>
</ol>
<p class="para">
  The method should appear as shown below:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="kt">_</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">starCount</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">        <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">height</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">width</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">        <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the new button to the rating button array</span></code></li>
            <li><code class="code-voice">        <span class="vc">ratingButtons</span>.<span class="vc">append</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  If you switch to the <code class="code-voice">Main.storyboard</code> and select the <code class="code-voice">RatingControl</code>, you’ll see the Star Size and Star Count settings in the Attributes inspector. The dashes indicate that the control is currently using the default values (in this case 44.0 points and 5 stars). However, changing these values does not yet change the control.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_inspectableattributes_2x.png" alt="image: ../Art/ICC_inspectableattributes_2x.png" width="272" height="272">
</figure>
</li><li class="item"><p class="para">
  To update the control, you need to reset the control’s buttons every time these attributes change. To do that, add a property observer to each property. A <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW123" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW123" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_16&quot;;return this.s_oc?this.s_oc(e):true">property observer</a></span> observes and responds to changes in a property’s value. Property observers are called every time a property’s value is set, and can be used to perform work immediately before or after the value changes. 
</p>
<p class="para">
  In <code class="code-voice">RatingControl.swift</code>, modify the inspectable properties as shown below:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBInspectable</span> <span class="kt">var</span> <span class="vc">starSize</span>: <span class="n"><!-- a href="" -->CGSize<!-- /a --></span> = <span class="vc">CGSize</span>(<span class="vc">width</span>: <span class="m">44.0</span>, <span class="vc">height</span>: <span class="m">44.0</span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">didSet</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">setupButtons</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">@IBInspectable</span> <span class="kt">var</span> <span class="vc">starCount</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span> = <span class="m">5</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">didSet</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">setupButtons</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Here, you define property observers for the <code class="code-voice">starSize</code> and <code class="code-voice">starCount</code> properties. Specifically, the <code class="code-voice">didSet</code> property observer is called immediately after the property’s value is set. Your implementation then calls the <code class="code-voice">setupButtons()</code> method. This method adds new buttons using the updated size and count; however, the current implementation doesn’t get rid of the old buttons.
</p>
</li><li class="item"><p class="para">
  To clear out the old buttons, add the following code to the beginning of the <code class="code-voice">setupButtons()</code> method.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// clear any existing buttons</span></code></li>
            <li><code class="code-voice"><span class="kt">for</span> <span class="vc">button</span> <span class="kt">in</span> <span class="vc">ratingButtons</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">removeArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">    <span class="vc">button</span>.<span class="vc">removeFromSuperview</span>()</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="vc">ratingButtons</span>.<span class="vc">removeAll</span>()</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This code iterates over all of the rating control’s buttons. First, it removes the button from the list of views managed by the stack view. This tells the stack view that it should no longer calculate the button’s size and position—but the button is still a subview of the stack view. Next, the code removes the button from the stack view entirely. Finally, once all the buttons have been removed, it clears the <code class="code-voice">ratingButtons</code> array.
</p>
<p class="para">
  The <code class="code-voice">setupButtons()</code> method should now appear as shown below:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// clear any existing buttons</span></code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="vc">button</span> <span class="kt">in</span> <span class="vc">ratingButtons</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">removeArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">removeFromSuperview</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="vc">ratingButtons</span>.<span class="vc">removeAll</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="kt">_</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">starCount</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">        <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">backgroundColor</span> = <span class="vc">UIColor</span>.<span class="vc">red</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">height</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">width</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">        <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the new button to the rating button array</span></code></li>
            <li><code class="code-voice">        <span class="vc">ratingButtons</span>.<span class="vc">append</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_32"></a>
  <aside class="aside">
    <p class="aside-title">Note
    </p>
    	<p class="para">Ripping out and replacing all of the buttons is not necessarily the best idea from a performance standpoint. However, the <code class="code-voice">didSet</code> observers should only be called by Interface Builder at design time. When the app is running, the <code class="code-voice">setupButtons()</code> method is only called once, when the control is first loaded from the storyboard. Therefore, there’s no need to create a more-complex solution to update the existing buttons in place.
    	</p>
    
  </aside>
</div>
</li>
</ol><p class="para">
  <em>Checkpoint</em>: Open <code class="code-voice">Main.storyboard</code> and select the <code class="code-voice">RatingControl</code> object. Try changing the Star Size and Star Count attributes. The control in the canvas should change to match the new settings. Run the app, and you should see the changes in the simulator.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_modifyinginspectableproperties_2x.png" alt="image: ../Art/ICC_modifyinginspectableproperties_2x.png" width="680" height="465">
</figure><p class="para">
  Be sure to reset these settings to their default values when you are done testing them.
</p><div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_33"></a>
  <aside class="aside">
    <p class="aside-title">Explore Further
    </p>
    	<p class="para">For more information on working with custom views, see Lay out user interfaces &gt; Add objects and media &gt; Render custom views in Xcode help.
    	</p>
    
  </aside>
</div>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW4"></a>
  <h3 class="section-name" tabindex="0">Add Star Images to the Buttons</h3>
  <p class="para">
  Next, you’ll add images of an empty, filled, and highlighted star to the buttons.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_emptyStar_2x.png" alt="image: ../Art/ICC_emptyStar_2x.png" width="75" height="75">
</figure><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_filledStar_2x.png" alt="image: ../Art/ICC_filledStar_2x.png" width="75" height="75">
</figure><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_highlightedStar_2x.png" alt="image: ../Art/ICC_highlightedStar_2x.png" width="75" height="75">
</figure><p class="para">
  You can find the star images used in this lesson in the <code class="code-voice">Images/</code> folder of the complete project file at the end of this lesson, or use your own images. (Make sure the names of the images you use match the image names in the code later.)
</p><p class="para">
  <strong class="inline-head">To add images to your project</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW57" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW57" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_17&quot;;return this.s_oc?this.s_oc(e):true">project navigator</a></span>, select <code class="code-voice">Assets.xcassets</code> to view the asset catalog.
</p>
<p class="para">
  Recall that the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW69" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW69" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_18&quot;;return this.s_oc?this.s_oc(e):true">asset catalog</a></span> is a place to store and organize your image assets for an app.
</p>
</li><li class="item"><p class="para">
  In the bottom left corner, click the plus (<code class="code-voice">+</code>) button and choose New Folder from the pop-up menu.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_assetcatalog_addfolder_2x.png" alt="image: ../Art/ICC_assetcatalog_addfolder_2x.png" width="680" height="434">
</figure>
</li><li class="item"><p class="para">
  Double-click the folder name and rename it <code class="code-voice">Rating Images</code>.
</p>
</li><li class="item"><p class="para">
  With the folder selected, in the bottom left corner, click the plus (<code class="code-voice">+</code>) button and choose New Image Set from the pop-up menu.
</p>
<p class="para">
  An image set represents a single image asset, but can contain different versions of the image to display at different screen resolutions.
</p>
</li><li class="item"><p class="para">
  Double-click the image set name and rename it <code class="code-voice">emptyStar</code>.
</p>
</li><li class="item"><p class="para">
  On your computer, select the empty star image you want to add.
</p>
</li><li class="item"><p class="para">
  Drag and drop the image into the <code class="code-voice">2x</code> slot in the image set.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_emptystar_drag_2x.png" alt="image: ../Art/ICC_emptystar_drag_2x.png" width="610" height="174">
</figure>
<p class="para">
  <code class="code-voice">2x</code> is the display resolution for iPhone 7 Simulator that you’re using in these lessons, so the image will look best at this resolution.
</p>
</li><li class="item"><p class="para">
  In the bottom left corner, click the plus (<code class="code-voice">+</code>) button and choose New Image Set from the pop-up menu.
</p>
</li><li class="item"><p class="para">
  Double-click the image set name and rename it <code class="code-voice">filledStar</code>.
</p>
</li><li class="item"><p class="para">
  On your computer, select the filled-in star image you want to add.
</p>
</li><li class="item"><p class="para">
  Drag and drop the image into the <code class="code-voice">2x</code> slot in the image set.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_filledstar_drag_2x.png" alt="image: ../Art/ICC_filledstar_drag_2x.png" width="610" height="174">
</figure>
</li><li class="item"><p class="para">
  In the bottom left corner, click the plus (<code class="code-voice">+</code>) button and choose New Image Set from the pop-up menu.
</p>
</li><li class="item"><p class="para">
  Double-click the image set name and rename it <code class="code-voice">highlightedStar</code>.
</p>
</li><li class="item"><p class="para">
  On your computer, select the filled-in star image you want to add.
</p>
</li><li class="item"><p class="para">
  Drag and drop the image into the <code class="code-voice">2x</code> slot in the image set.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_highlightedstar_drag_2x.png" alt="image: ../Art/ICC_highlightedstar_drag_2x.png" width="610" height="174">
</figure>
</li>
</ol><p class="para">
  Your Rating images folder should now contain all three star images.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_assetcatalog_final_2x.png" alt="image: ../Art/ICC_assetcatalog_final_2x.png" width="680" height="441">
</figure><p class="para">
  Next, write the code to set the appropriate image for a button at the right time.
</p><p class="para">
  <strong class="inline-head">To set star images for the buttons</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, navigate to the <code class="code-voice">setupButtons()</code> method, and add this code just above the <code class="code-voice">for</code>-<code class="code-voice">in</code> loop that creates the buttons:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Load Button Images</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">bundle</span> = <span class="vc">Bundle</span>(<span class="vc">for</span>: <span class="vc">type</span>(<span class="vc">of</span>: <span class="kt">self</span>))</code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">filledStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>: <span class="s">"filledStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">emptyStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"emptyStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">highlightedStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"highlightedStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  These lines load the star images from the assets catalog. Note that the assets catalog is located in the app’s main bundle. This means that the app can load the images using the shorter <code class="code-voice">UIImage(named:)</code> method. However, because the control is <code class="code-voice">@IBDesignable</code>, the setup code also needs to run in Interface Builder. For the images to load properly in Interface Builder, you must explicitly specify the catalog’s bundle. This ensures that the system can find and load the image.
</p>
</li><li class="item"><p class="para">
  Find the line that sets the background color (<code class="code-voice">button.backgroundColor = UIColor.redColor()</code>) and replace it with the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Set the button images</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">emptyStar</span>, <span class="vc">for</span>: .<span class="vc">normal</span>)</code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">filledStar</span>, <span class="vc">for</span>: .<span class="vc">selected</span>)</code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: .<span class="vc">highlighted</span>)</code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: [.<span class="vc">highlighted</span>, .<span class="vc">selected</span>])</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Buttons have five different states: normal, highlighted, focused, selected, and disabled. By default, the button modifies its appearance based on its state, for example a disabled button appears grayed out. A button can be in more than one state at the same time, such as when a button is both disabled and highlighted. 
</p>
<p class="para">
  Buttons always start in the normal state (not highlighted, selected, focused, or disabled). A button is highlighted whenever the user touches it. You can also programmatically set a button to be selected or disabled. The focused state is used by focus-based interfaces, like Apple TV.
</p>
<p class="para">
  In the code above, you are telling the button to use the empty star image for the normal state. This is the button’s default image. The system uses this image (possibly with an added effect) whenever a state or combination of states doesn’t have an image of their own.
</p>
<p class="para">
  Next, the code above sets the filled image for the selected state. If you programmatically set the button as selected, it will change from the empty star to the filled star. 
</p>
<p class="para">
  Finally, you set the highlighted image for both the highlighted and the selected and highlighted states. When the user touches the button, whether or not it is selected, the system will show the highlighted button image.
</p>
</li>
</ol><p class="para">
  Your <code class="code-voice">setupButtons()</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Clear any existing buttons</span></code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="vc">button</span> <span class="kt">in</span> <span class="vc">ratingButtons</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">removeArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">removeFromSuperview</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="vc">ratingButtons</span>.<span class="vc">removeAll</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Load Button Images</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">bundle</span> = <span class="vc">Bundle</span>(<span class="vc">for</span>: <span class="vc">type</span>(<span class="vc">of</span>: <span class="kt">self</span>))</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">filledStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>: <span class="s">"filledStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">emptyStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"emptyStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">highlightedStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"highlightedStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="kt">_</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">starCount</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">        <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Set the button images</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">emptyStar</span>, <span class="vc">for</span>: .<span class="vc">normal</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">filledStar</span>, <span class="vc">for</span>: .<span class="vc">selected</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: .<span class="vc">highlighted</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: [.<span class="vc">highlighted</span>, .<span class="vc">selected</span>])</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">height</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">width</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">        <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the new button to the rating button array</span></code></li>
            <li><code class="code-voice">        <span class="vc">ratingButtons</span>.<span class="vc">append</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint</em>: Run your app. You should see stars instead of red buttons. Tapping any of the buttons at this point should still call <code class="code-voice">ratingButtonTapped(_:)</code> and log the message to the console. You’ll even see the blue highlighted star while you are touching the button, but your buttons don’t change to the filled images yet. You’ll fix that next.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_sim_emptystars_2x.png" alt="image: ../Art/ICC_sim_emptystars_2x.png" width="387" height="679">
</figure>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW10"></a>
  <h3 class="section-name" tabindex="0">Implement the Button Action</h3>
  <p class="para">
  The user needs to be able to select a rating by tapping a star, so you’ll replace the debugging implementation with a real implementation of the <code class="code-voice">ratingButtonTapped(_:)</code> method.
</p><p class="para">
  <strong class="inline-head">To implement the rating action</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, find the <code class="code-voice">ratingButtonTapped(button:)</code> method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"Button pressed 👍"</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Replace the <code class="code-voice">print</code> statement with this code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">guard</span> <span class="kt">let</span> <span class="vc">index</span> = <span class="vc">ratingButtons</span>.<span class="vc">index</span>(<span class="vc">of</span>: <span class="vc">button</span>) <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">fatalError</span>(<span class="s">"The button, </span>\(<span class="vc">button</span>)<span class="s">, is not in the ratingButtons array: </span>\(<span class="vc">ratingButtons</span>)<span class="s">"</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Calculate the rating of the selected button</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">selectedRating</span> = <span class="vc">index</span> + <span class="m">1</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">if</span> <span class="vc">selectedRating</span> == <span class="vc">rating</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// If the selected star represents the current rating, reset the rating to 0.</span></code></li>
            <li><code class="code-voice">        <span class="vc">rating</span> = <span class="m">0</span></code></li>
            <li><code class="code-voice">    } <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// Otherwise set the rating to the selected star</span></code></li>
            <li><code class="code-voice">        <span class="vc">rating</span> = <span class="vc">selectedRating</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  In the code above, the <code class="code-voice">indexOf(_:)</code> method attempts to find the selected button in the array of buttons and to return the index at which it was found. This method returns an optional <code class="code-voice">Int</code> because the instance you’re searching for might not exist in the collection you’re searching. However, because the only buttons that trigger this action are the ones you created and added to the array, if the <code class="code-voice">indexOf(_:)</code> method cannot find a matching button, you have a serious bug in your code. Throwing a fatal error here terminates the app and prints a useful error message to the console, helping you find and fix any problems while you design and test your app.
</p>
<p class="para">
  Once you have the button’s index (in this case a value from 0 to 4), you add 1 to the index to calculate the selected rating (giving you a value from 1 to 5). If the user tapped the star that corresponds with the current rating, you reset the control’s <code class="code-voice">rating</code> property to 0. Otherwise, you set the <code class="code-voice">rating</code> to the selected rating.
</p>
</li><li class="item"><p class="para">
  Once the rating is set, you need some way to update the button’s appearance. In <code class="code-voice">RatingControl.swift</code>, before the last curly brace (<code class="code-voice">}</code>), add the following method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">updateButtonSelectionStates</span>() {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This is a helper method that you’ll use to update the selection state of the buttons.
</p>
</li><li class="item"><p class="para">
  In the <code class="code-voice">updateButtonSelectionStates()</code> method, add the following <code class="code-voice">for</code>-<code class="code-voice">in</code> loop:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">updateButtonSelectionStates</span>() {</code></li>
            <li><code class="code-voice">    <span class="kt">for</span> (<span class="vc">index</span>, <span class="vc">button</span>) <span class="kt">in</span> <span class="vc">ratingButtons</span>.<span class="vc">enumerated</span>() {</code></li>
            <li><code class="code-voice">        <span class="c">// If the index of a button is less than the rating, that button should be selected.</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">isSelected</span> = <span class="vc">index</span> &lt; <span class="vc">rating</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This code iterates through the buttons and sets each one’s selected state based on its position and the rating. As you saw earlier, the selected state affects the button’s appearance. If the button’s index is less than the rating, the <code class="code-voice">isSelected</code> property is set to <code class="code-voice">true</code>, and the button displays the filled-in star image. Otherwise, the <code class="code-voice">isSelected</code> property is set to <code class="code-voice">false</code>, and the button shows the empty star image.
</p>
</li><li class="item"><p class="para">
  Add a property observer to the <code class="code-voice">rating</code> property, and have it call the <code class="code-voice">updateButtonSelectionStates()</code> method whenever the rating changes.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">rating</span> = <span class="m">0</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">didSet</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">updateButtonSelectionStates</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  You also need to update the button’s selection state whenever buttons are added to the control. In the <code class="code-voice">setupButtons()</code> method, add a call to the <code class="code-voice">updateButtonSelectionStates()</code> method just above the method’s closing curly brace (<code class="code-voice">}</code>). The <code class="code-voice">setupButtons()</code> method should now look as shown below:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Clear any existing buttons</span></code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="vc">button</span> <span class="kt">in</span> <span class="vc">ratingButtons</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">removeArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">removeFromSuperview</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="vc">ratingButtons</span>.<span class="vc">removeAll</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Load Button Images</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">bundle</span> = <span class="vc">Bundle</span>(<span class="vc">for</span>: <span class="vc">type</span>(<span class="vc">of</span>: <span class="kt">self</span>))</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">filledStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>: <span class="s">"filledStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">emptyStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"emptyStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">highlightedStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"highlightedStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="vc">index</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">starCount</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">        <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Set the button images</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">emptyStar</span>, <span class="vc">for</span>: .<span class="vc">normal</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">filledStar</span>, <span class="vc">for</span>: .<span class="vc">selected</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: .<span class="vc">highlighted</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: [.<span class="vc">highlighted</span>, .<span class="vc">selected</span>])</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">height</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">width</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">        <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the new button to the rating button array</span></code></li>
            <li><code class="code-voice">        <span class="vc">ratingButtons</span>.<span class="vc">append</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="vc">updateButtonSelectionStates</span>()</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  <em>Checkpoint</em>: Run your app. You should see five stars and be able to click one to change the rating. Click the third star to change the rating to 3, for example. Click the same star a second time. The control should reset to a zero-star rating.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_sim_filledstars_2x.png" alt="image: ../Art/ICC_sim_filledstars_2x.png" width="320" height="559">
</figure>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_9"></a>
  <h3 class="section-name" tabindex="0">Add Accessibility Information</h3>
  <p class="para">
  With iOS built-in accessibility features, you can deliver an outstanding mobile experience to every customer, including those with special needs. These features include VoiceOver, Switch Control, playback of closed captioned or audio described video, Guided Access, Text to Speech, and more.
</p><p class="para">
  In most cases, users benefit from these features without any additional work on your part. VoiceOver, however, often requires a little attention. VoiceOver is a revolutionary screen reader for blind and low vision users. VoiceOver reads your user interface to the user. Although the default description of built-in controls provides a good starting point, you may need to optimize the presentation of your user interface, especially for custom views and controls.
</p><p class="para">
  For the rating control, you need to provide three additional pieces of information for each button,
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  <strong class="inline-head">Accessibility label.</strong> A short, localized word or phrase that succinctly describes the control or view, but does not identify the element’s type. Examples are “Add” or “Play.”
</p>
</li><li class="item"><p class="para">
  <strong class="inline-head">Accessibility value.</strong> The current value of an element, when the value is not represented by the label. For example, the label for a slider might be “Speed,” but its current value might be “50%.” 
</p>
</li><li class="item"><p class="para">
  <strong class="inline-head">Accessibility hint.</strong> A brief, localized phrase that describes the results of an action on an element. Examples are “Adds a title” or “Opens the shopping list.”
</p>
</li>
</ul><p class="para">
  In the rating control, each button’s accessibility label describes the value that the button sets. For example, the first button’s label says “Set 1 star rating.” The accessibility value contains the control’s current rating. For example, if you have a 4-star rating, the value says “4 stars set.” Finally, you assign a hint to the currently selected star that says, “Tap to reset the rating to zero.” All the other stars have a <code class="code-voice">nil</code>-valued hint, because their effects are already adequately described by their labels.
</p><p class="para">
  <strong class="inline-head">To add accessibility labels, values, and hints</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">RatingControl.swift</code>, navigate to the <code class="code-voice">setupButtons()</code> method. find the <code class="code-voice">for</code>-<code class="code-voice">in</code> declaration. Replace the placeholder loop variable (<code class="code-voice">_</code>) with <code class="code-voice">index</code> as shown:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">for</span> <span class="vc">index</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">starCount</span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Inside the <code class="code-voice">for</code>-<code class="code-voice">in</code> loop, just after the constraints, add the following code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Set the accessibility label</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">accessibilityLabel</span> = <span class="s">"Set </span>\(<span class="vc">index</span> + <span class="m">1</span>)<span class="s"> star rating"</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This code calculates a label string using the button’s index, then assigns it to the button’s <code class="code-voice">accessibilityLabel</code> property. 
</p>
<p class="para">
  The <code class="code-voice">setupButtons()</code> method should now look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">private</span> <span class="kt">func</span> <span class="vc">setupButtons</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Clear any existing buttons</span></code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="vc">button</span> <span class="kt">in</span> <span class="vc">ratingButtons</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">removeArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">removeFromSuperview</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="vc">ratingButtons</span>.<span class="vc">removeAll</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Load Button Images</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">bundle</span> = <span class="vc">Bundle</span>(<span class="vc">for</span>: <span class="vc">type</span>(<span class="vc">of</span>: <span class="kt">self</span>))</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">filledStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>: <span class="s">"filledStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">emptyStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"emptyStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">highlightedStar</span> = <span class="vc">UIImage</span>(<span class="vc">named</span>:<span class="s">"highlightedStar"</span>, <span class="vc">in</span>: <span class="vc">bundle</span>, <span class="vc">compatibleWith</span>: <span class="kt">self</span>.<span class="vc">traitCollection</span>)</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">for</span> <span class="vc">index</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">starCount</span> {</code></li>
            <li><code class="code-voice">        <span class="c">// Create the button</span></code></li>
            <li><code class="code-voice">        <span class="kt">let</span> <span class="vc">button</span> = <span class="vc">UIButton</span>()</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Set the button images</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">emptyStar</span>, <span class="vc">for</span>: .<span class="vc">normal</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">filledStar</span>, <span class="vc">for</span>: .<span class="vc">selected</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: .<span class="vc">highlighted</span>)</code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">setImage</span>(<span class="vc">highlightedStar</span>, <span class="vc">for</span>: [.<span class="vc">highlighted</span>, .<span class="vc">selected</span>])</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add constraints</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">translatesAutoresizingMaskIntoConstraints</span> = <span class="kt">false</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">heightAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">height</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">widthAnchor</span>.<span class="vc">constraint</span>(<span class="vc">equalToConstant</span>: <span class="vc">starSize</span>.<span class="vc">width</span>).<span class="vc">isActive</span> = <span class="kt">true</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Set the accessibility label</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">accessibilityLabel</span> = <span class="s">"Set </span>\(<span class="vc">index</span> + <span class="m">1</span>)<span class="s"> star rating"</span></code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Setup the button action</span></code></li>
            <li><code class="code-voice">        <span class="vc">button</span>.<span class="vc">addTarget</span>(<span class="kt">self</span>, <span class="vc">action</span>: <span class="kt">#selector</span>(<span class="vc">RatingControl</span>.<span class="vc">ratingButtonTapped</span>(<span class="vc">button</span>:)), <span class="vc">for</span>: .<span class="vc">touchUpInside</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the button to the stack</span></code></li>
            <li><code class="code-voice">        <span class="vc">addArrangedSubview</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Add the new button to the rating button array</span></code></li>
            <li><code class="code-voice">        <span class="vc">ratingButtons</span>.<span class="vc">append</span>(<span class="vc">button</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="vc">updateButtonSelectionStates</span>()</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Navigate to the updateButtonSelectionStates() method. Inside the <code class="code-voice">for</code>-<code class="code-voice">in</code> loop, add the following code just after the line that sets the button’s <code class="code-voice">isSelected</code> property.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Set the hint string for the currently selected star</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">hintString</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span>?</code></li>
            <li><code class="code-voice"><span class="kt">if</span> <span class="vc">rating</span> == <span class="vc">index</span> + <span class="m">1</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">hintString</span> = <span class="s">"Tap to reset the rating to zero."</span></code></li>
            <li><code class="code-voice">} <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">hintString</span> = <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="c">// Calculate the value string</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">valueString</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span></code></li>
            <li><code class="code-voice"><span class="kt">switch</span> (<span class="vc">rating</span>) {</code></li>
            <li><code class="code-voice"><span class="kt">case</span> <span class="m">0</span>:</code></li>
            <li><code class="code-voice">    <span class="vc">valueString</span> = <span class="s">"No rating set."</span></code></li>
            <li><code class="code-voice"><span class="kt">case</span> <span class="m">1</span>:</code></li>
            <li><code class="code-voice">    <span class="vc">valueString</span> = <span class="s">"1 star set."</span></code></li>
            <li><code class="code-voice"><span class="kt">default</span>:</code></li>
            <li><code class="code-voice">    <span class="vc">valueString</span> = <span class="s">"</span>\(<span class="vc">rating</span>)<span class="s"> stars set."</span></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="c">// Assign the hint string and value string</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">accessibilityHint</span> = <span class="vc">hintString</span></code></li>
            <li><code class="code-voice"><span class="vc">button</span>.<span class="vc">accessibilityValue</span> = <span class="vc">valueString</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Here, you start by checking whether the button is the currently selected button. If it is, you assign a hint. If not, you set the button’s <code class="code-voice">hintString</code> property to <code class="code-voice">nil</code>. 
</p>
<p class="para">
  Next, you calculate the value based on the control’s rating. Use a <code class="code-voice">switch</code> statement to assign custom strings if the <code class="code-voice">rating</code> is <code class="code-voice">0</code> or <code class="code-voice">1</code>. If the rating is greater than <code class="code-voice">1</code>, you calculate the hint using string interpolation.
</p>
<p class="para">
  Finally, assign these values to the <code class="code-voice">accessibilityHint</code> and <code class="code-voice">accessibilityValue</code> properties.
</p>
</li>
</ol><p class="para">
  When the user runs your app with VoiceOver enabled, when they touch one of the buttons, VoiceOver reads the button’s label, followed by the word <em>button</em>. Then it reads the accessibility value. Finally, it reads the accessibility hint (if any). This lets the user know both the control’s current value and the result of tapping the currently selected button.
</p><div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_34"></a>
  <aside class="aside">
    <p class="aside-title">Explore Further
    </p>
    	<p class="para">For more information on accessibility, see <a href="https://developer.apple.com/accessibility/ios/" onclick="s_objectID=&quot;https://developer.apple.com/accessibility/ios/_1&quot;;return this.s_oc?this.s_oc(e):true">Accessibility on iOS</a>.
    	</p>
    <p class="para">
  Also, for the purpose of this lesson, you assigned simple strings to the accessibility properties; however, a production app should use localized strings. For more information on internationalization and localization, see <a href="https://developer.apple.com/internationalization/" onclick="s_objectID=&quot;https://developer.apple.com/internationalization/_1&quot;;return this.s_oc?this.s_oc(e):true">Build Apps for the World</a>.
</p>

  </aside>
</div>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW12"></a>
  <h3 class="section-name" tabindex="0">Connect the Rating Control to the View Controller</h3>
  <p class="para">
  The last thing you need to do to set up the rating control is to give the <code class="code-voice">ViewController</code> class a reference to it.
</p><p class="para">
  <strong class="inline-head">To connect a rating control outlet to ViewController.swift</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open your storyboard.
</p>
</li><li class="item"><p class="para">
  Click the Assistant button in the Xcode toolbar to open the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW76" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW76" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_19&quot;;return this.s_oc?this.s_oc(e):true">assistant editor</a></span>. 
</p>
<figure class="figure">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW6"></a>
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/assistant_editor_toggle_2x.png" alt="image: ../Art/assistant_editor_toggle_2x.png" width="307" height="101">
</figure>
</li><li class="item"><p class="para">
  If you want more space to work, collapse the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW57" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW57" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_20&quot;;return this.s_oc?this.s_oc(e):true">project navigator</a></span> and <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW72" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW72" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_21&quot;;return this.s_oc?this.s_oc(e):true">utility area</a></span> by clicking the Navigator and Utilities buttons in the Xcode toolbar.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/navigator_utilities_toggle_on_2x.png" alt="image: ../Art/navigator_utilities_toggle_on_2x.png" width="372" height="100">
</figure>
<p class="para">
  You can also collapse the outline view.
</p>
</li><li class="item"><p class="para">
  Select the rating control.
</p>
<p class="para">
  <code class="code-voice">ViewController.swift</code> displays in the editor on the right. (If it doesn’t, choose Automatic &gt; ViewController.swift in the editor selector bar.)
</p>
</li><li class="item"><p class="para">
  Control-drag from the rating control on your canvas to the code display in the editor on the right, stopping the drag at the line below the <code class="code-voice">photoImageView</code> property in <code class="code-voice">ViewController.swift</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_ratingcontrol_dragoutlet_2x.png" alt="image: ../Art/ICC_ratingcontrol_dragoutlet_2x.png" width="680" height="437">
</figure>
</li><li class="item"><p class="para">
  In the dialog that appears, for Name, type <code class="code-voice">ratingControl</code>. Leave the rest of the options as they are. 
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_ratingcontrol_addoutlet_2x.png" alt="image: ../Art/ICC_ratingcontrol_addoutlet_2x.png" width="680" height="431">
</figure>
</li><li class="item"><p class="para">
  Click Connect.
</p>
</li>
</ol><p class="para">
  The <code class="code-voice">ViewController</code> class now has a reference to the rating control in the storyboard.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-SW7"></a>
  <h3 class="section-name" tabindex="0">Clean Up the Project</h3>
  <p class="para">
  You’re close to finalizing the meal scene’s user interface, but first you need to do some cleanup. Now that the FoodTracker app is implementing more advanced behavior and a different user interface than in the previous lessons, you’ll want to remove the pieces you don’t need. You’ll also center the elements in your stack view to balance the user interface.
</p><p class="para">
  <strong class="inline-head">To clean up the UI</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Return to the standard editor by clicking the Standard button.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/standard_toggle_2x.png" alt="image: ../Art/standard_toggle_2x.png" width="371" height="86">
</figure>
<p class="para">
  Expand the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.
</p>
</li><li class="item"><p class="para">
  Open your storyboard.
</p>
</li><li class="item"><p class="para">
  Select the Set Default Label Text button, and press the Delete key to delete it.
</p>
<p class="para">
  The stack view rearranges your user interface elements to fill the gap that the button left.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_deletebutton_2x.png" alt="image: ../Art/ICC_deletebutton_2x.png" width="423" height="712">
</figure>
</li><li class="item"><p class="para">
  If necessary, open the outline view. Select the Stack View object.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_outlineview_2x.png" alt="image: ../Art/ICC_outlineview_2x.png" width="282" height="320">
</figure>
</li><li class="item"><p class="para">
  Open the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW19" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW19" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_22&quot;;return this.s_oc?this.s_oc(e):true">Attributes inspector</a></span> <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/inspector_attributes_2x.png" alt="image: ../Art/inspector_attributes_2x.png" width="16" height="16">.
</p>
</li><li class="item"><p class="para">
  In the Attributes inspector, find the Alignment field and select Center.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_centerstack_2x.png" alt="image: ../Art/ICC_centerstack_2x.png" width="422" height="712">
</figure>
</li>
</ol><p class="para">
  Now, remove the action method that corresponds with the button you deleted.
</p><p class="para">
  <strong class="inline-head">To clean up the code</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open <code class="code-voice">ViewController.swift</code>.
</p>
</li><li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, delete the <code class="code-voice">setDefaultLabelText(_:)</code> action method.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBAction</span> <span class="kt">func</span> <span class="vc">setDefaultLabelText</span>(<span class="vc">sender</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">mealNameLabel</span>.<span class="vc">text</span> = <span class="s">"Default Text"</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  That’s all you need to delete for now. You’ll make a change to the label outlet (<code class="code-voice">mealNameLabel</code>) in a later lesson.
</p>
</li>
</ol><p class="para">
  <em>Checkpoint</em>: Run your app. Everything should work exactly as before, but the Set Default Label Text button is gone, and the elements are centered horizontally. The buttons should be side-by-side. Clicking any of the buttons at this point should still call <code class="code-voice">ratingButtonTapped(_:)</code> and change the button images appropriately.
</p><div class="important clear">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_35"></a>
  <aside class="aside">
    <p class="aside-title">Important
    </p>
    <p class="para">If you’re running into build issues, try pressing Command-Shift-K to <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW107" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW107" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_23&quot;;return this.s_oc?this.s_oc(e):true">clean</a></span> your project.
    </p>
    
  </aside>
</div><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/ICC_sim_finalUI_2x.png" alt="image: ../Art/ICC_sim_finalUI_2x.png" width="387" height="679">
</figure>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_10"></a>
  <h3 class="section-name" tabindex="0">Wrapping Up</h3>
  <p class="para">
  In this lesson, you learned how to build a custom control that can be displayed in Interface Builder. The control also exposes properties that can be modified in the Attributes inspector. Finally, you added accessibility information, ensuring that the control works well with Voice Over.
</p><p class="para">
  Next, you will design and connect the app’s data model.
</p><div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH19-DontLinkElementID_36"></a>
  <aside class="aside">
    <p class="aside-title">Note
    </p>
    	<p class="para">To see the completed sample project for this lesson, download the file and view it in Xcode.
    	</p>
    <p class="para">
  <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/WWDR_download_icon_withPadding_2x.png" alt="image: ../Art/WWDR_download_icon_withPadding_2x.png" width="15" height="17"><a href="https://developer.apple.com/sample-code/swift/downloads/04_ImplementACustomControl.zip" onclick="s_objectID=&quot;https://developer.apple.com/sample-code/swift/downloads/04_ImplementACustomControl.zip_1&quot;;return this.s_oc?this.s_oc(e):true">Download File</a>
</p>

  </aside>
</div>
  
</section>


 	<section id="next_previous" class="">
    		<p class="previous-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH6-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_2&quot;;return this.s_oc?this.s_oc(e):true">Work with View Controllers</a></p>
  			<p class="next-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH20-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_2&quot;;return this.s_oc?this.s_oc(e):true">Define Your Data Model</a></p>

    <p class="copyright">Copyright © 2018 Apple Inc. All rights reserved. 
  <a class="link" href="http://www.apple.com/legal/terms/site.html" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/legal/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true">Terms of Use</a> | 
  <a class="link" href="http://www.apple.com/privacy/" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true">Privacy Policy</a> | 
  <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_5&quot;;return this.s_oc?this.s_oc(e):true">Updated: 2016-12-08</a>
</p>
  </section>
</article>

    </div>
    <div id="big_button"></div>
    <footer id="footer">
  <script src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/devpubs-1.6.3.js" type="text/javascript" charset="utf-8"></script>
  <div id="_omniture_top">
<!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
<script type="text/javascript">
/* RSID: */
var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
</script>

<script type="text/javascript" src="./Start Developing iOS Apps (Swift)_ Implement a Custom Control_files/s_code_h.js"></script>
<script type="text/javascript">
s.pageName=AC.Tracking.pageName();
s.channel="www.us.developer"

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code=s.t();if(s_code)document.write(s_code)</script>
<!-- End SiteCatalyst code version: H.8. -->
</div>

</footer>

    
  
    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback…</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We’re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect"> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples"> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art"> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo"> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send">

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>



</body></html>