<!DOCTYPE html>
<!-- saved from url=(0163)https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1 -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Start Developing iOS Apps (Swift): Work with View Controllers</title>
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/style-1.6.3.css">
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/feedback-1.6.3.css">
   
<meta id="j-version" name="j-version" content="">
<meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42">
<meta id="document-version" name="document-version" content="1.5.3">
<meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Topic/General}">
<meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40015214">
<meta id="chapterId" name="chapterId" content="TP40015214-CH6">
<meta id="book-title" name="book-title" content="Start Developing iOS Apps (Swift)">
<meta id="book-resource-type" name="book-resource-type" content="Guide">
<meta id="book-root" name="book-root" content="./">
<meta id="book-json" name="book-json" content="book.json">
<meta id="date" name="date" content="2016-12-08">
<meta id="description" name="description" content="A hands-on introduction to iOS app development using Swift.">
<meta id="IndexTitle" name="IndexTitle" content="">
<meta id="resources-uri" name="resources-uri" content="../../../Resources/1282">
<link id="book-index-page" rel="Start" title="" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html">
<!-- , next_chapter: next_chapter, previous_chapter: previous_chapter -->
<link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html">
<link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html">
<meta id="devcenter" name="devcenter" content="&lt;!-- DEVCENTER_NAME --&gt;">
<meta id="devcenter-url" name="devcenter-url" content="&lt;!-- DEVCENTER_URL --&gt;">
<meta id="reflib" name="reflib" content="&lt;!-- REFLIB_NAME --&gt;">

<meta id="xcode-display" name="xcode-display" content="render">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
<meta id="platforms" name="platforms" content="iOS">
</head>

  <body id="roadmap" class="jazz">
    
    <header id="ios_header" class="hideOnPrint hideInXcode">
  <div class="content-wrapper">
    <p class="header-text">
    	<a href="https://developer.apple.com/library/archive/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true">Documentation Archive
 		</a>
 </p>
    <p id="wwdr"><img id="apple_logo" src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/apple2.png" height="14px" width="12px" aria-hidden="true"><a href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true">Developer</a></p>
  </div>
</header>

    <section id="valence">
  <div class="content-wrapper">
	<p id="hierarchial_navigation">
		<span id="book_title">Start Developing iOS Apps (Swift)</span>
	</p>
	<form id="search" class="hideInXcode" method="get" action="https://developer.apple.com/search/index.php" accept-charset="utf-8" autocomplete="off">
  <input type="search" id="ssi_SearchField" placeholder="Search Documentation Archive" name="q" autocomplete="off" tabindex="2">
</form>

	  
   
   



    <img id="shortstack" src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/shortstack_2x.png">
  </div>
</section>
    <div class="content-wrapper">
      <nav id="navigator" class="book-parts hideInXcode" role="navigation">
    <ul class="nav-parts">
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_1&quot;;return this.s_oc?this.s_oc(e):true">Getting Started</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_2&quot;;return this.s_oc?this.s_oc(e):true">Jump Right In<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name nav-part-active open-part">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_1&quot;;return this.s_oc?this.s_oc(e):true">Building the UI</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_2&quot;;return this.s_oc?this.s_oc(e):true">Build a Basic UI<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH22-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_1&quot;;return this.s_oc?this.s_oc(e):true">Connect the UI to Code<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter nav-current-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH6-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_1&quot;;return this.s_oc?this.s_oc(e):true">Work with View Controllers<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_1&quot;;return this.s_oc?this.s_oc(e):true">Implement a Custom Control<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH20-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_1&quot;;return this.s_oc?this.s_oc(e):true">Define Your Data Model<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_2&quot;;return this.s_oc?this.s_oc(e):true">Working with Table Views</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_3&quot;;return this.s_oc?this.s_oc(e):true">Create a Table View<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementNavigation.html#//apple_ref/doc/uid/TP40015214-CH16-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH16-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_2&quot;;return this.s_oc?this.s_oc(e):true">Implement Navigation<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementEditAndDeleteBehavior.html#//apple_ref/doc/uid/TP40015214-CH9-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH9-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_3&quot;;return this.s_oc?this.s_oc(e):true">Implement Edit and Delete Behavior<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/PersistData.html#//apple_ref/doc/uid/TP40015214-CH14-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH14-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/P_1&quot;;return this.s_oc?this.s_oc(e):true">Persist Data<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_1&quot;;return this.s_oc?this.s_oc(e):true">What’s Next?</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_2&quot;;return this.s_oc?this.s_oc(e):true">Where to Go from Here<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_1&quot;;return this.s_oc?this.s_oc(e):true">iOS and Swift Terminology</a>
          <ul class="nav-chapters">
              <li class="glossary nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_2&quot;;return this.s_oc?this.s_oc(e):true">Glossary<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li data-id="revision-history" class="part-name">
          <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_3&quot;;return this.s_oc?this.s_oc(e):true">Revision History</a>
          <ul class="nav-chapters">
            <li class="nav-chapter">
              <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_4&quot;;return this.s_oc?this.s_oc(e):true">Document Revision History</a>
            </li>
          </ul>
        </li>
    </ul>
</nav>

      <menu id="bashful" type="toolbar">
  <div class="shield"></div>
  <menuitem id="jump_to" class="menu-bar-item closed">
  <span>On This Page</span>
  <div class="chevron">
    <div class="chevy chevron-left"></div>
    <div class="chevy chevron-right"></div>
  </div>
  <menu type="list" class="details">
      <ul class="list-bullet">
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW2" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_2&quot;;return this.s_oc?this.s_oc(e):true">Learning Objectives</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW3" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_3&quot;;return this.s_oc?this.s_oc(e):true">Understand the View Controller Lifecycle</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW5" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_4&quot;;return this.s_oc?this.s_oc(e):true">Add a Meal Photo</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW6" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_5&quot;;return this.s_oc?this.s_oc(e):true">Display a Default Photo</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW7" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_6&quot;;return this.s_oc?this.s_oc(e):true">Connect the Image View to Code</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW8" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_7&quot;;return this.s_oc?this.s_oc(e):true">Create a Gesture Recognizer</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW9" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_8&quot;;return this.s_oc?this.s_oc(e):true">Connect the Gesture Recognizer to Code</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW10" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_9&quot;;return this.s_oc?this.s_oc(e):true">Create an Image Picker to Respond to User Taps</a>
          </li>
      </ul>
  </menu>
</menuitem>

</menu>
<div class="pixel-line"></div>
<div class="rubber-band-gap"></div>
<article class="chapter">
  <a name="//apple_ref/doc/uid/TP40015214-CH6"></a><a name="//apple_ref/doc/uid/TP40015214-CH6-SW1"></a>
  <h2 class="chapter-name chapter-name-short">Work with View Controllers</h2>
  
  	<section class="section">
  		<p class="para">
  In this lesson, you’ll continue to work on the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW18" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW18" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_3&quot;;return this.s_oc?this.s_oc(e):true">user interface (UI)</a></span> for the meal scene in the FoodTracker app. You’ll add an image view to the scene, and use an image picker to let the user select an image for the meal.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_sim_finalUI_2x.png" alt="image: ../Art/WWVC_sim_finalUI_2x.png" width="387" height="679">
</figure>

		</section> 
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW2"></a>
  <h3 class="section-name" tabindex="0">Learning Objectives</h3>
  <p class="para">
  At the end of the lesson, you’ll be able to:
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  Understand the&nbsp;view controller life cycle&nbsp;and its callbacks (for example, <code class="code-voice">viewDidLoad</code>,&nbsp;<code class="code-voice">viewWillAppear</code>&nbsp;and&nbsp;<code class="code-voice">viewDidAppear</code>)&nbsp;
</p>
</li><li class="item"><p class="para">
  Pass data between view controllers
</p>
</li><li class="item"><p class="para">
  Dismiss a view controller
</p>
</li><li class="item"><p class="para">
  Use&nbsp;gesture recognizers&nbsp;to generate events
</p>
</li><li class="item"><p class="para">
  Anticipate object behavior based on the&nbsp;<code class="code-voice">UIView</code>/<code class="code-voice">UIControl</code>&nbsp;class hierarchy
</p>
</li><li class="item"><p class="para">
  Use the asset catalog to add image assets to a project
</p>
</li>
</ul>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW3"></a>
  <h3 class="section-name" tabindex="0">Understand the View Controller Lifecycle</h3>
  <p class="para">
  So far, the FoodTracker app has a single <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW62" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW62" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_4&quot;;return this.s_oc?this.s_oc(e):true">scene</a></span>, whose user interface is managed by a single <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW7" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW7" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_5&quot;;return this.s_oc?this.s_oc(e):true">view controller</a></span>. As you build more complex apps, you’ll create more scenes, and will need to manage loading and unloading <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW16" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW16" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_6&quot;;return this.s_oc?this.s_oc(e):true">views</a></span> as they’re moved on and off the screen.
</p><p class="para">
  An object of the <code class="code-voice">UIViewController</code> class (and its subclasses) comes with a set of methods that manage its view hierarchy. iOS automatically calls these methods at appropriate times when a view controller transitions between states. When you create a view controller <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW14" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW14" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_7&quot;;return this.s_oc?this.s_oc(e):true">subclass</a></span> (like the <code class="code-voice">ViewController</code> class you’ve been working with), it <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW45" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW45" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_8&quot;;return this.s_oc?this.s_oc(e):true">inherits</a></span> the methods defined in <code class="code-voice">UIViewController</code> and lets you add your own custom behavior for each method. It’s important to understand when the system calls these methods, so you can set up or tear down the views you’re displaying at the appropriate step in the process—something you’ll need to do later in the lessons.
</p><figure class="figure">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW4"></a>
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_vclife_2x.png" alt="image: ../Art/WWVC_vclife_2x.png" width="462" height="438">
</figure><p class="para">
  iOS calls the <code class="code-voice">UIViewController</code> methods as follows:
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  <code class="code-voice">viewDidLoad()</code>—Called when the view controller’s content view (the top of its view hierarchy) is created and loaded from a storyboard. The view controller’s outlets are guaranteed to have valid values by the time this method is called. Use this method to perform any additional setup required by your view controller. 
</p>
<p class="para">
  Typically, iOS calls <code class="code-voice">viewDidLoad()</code> only once, when its content view is first created; however, the content view is not necessarily created when the controller is first instantiated. Instead, it is lazily created the first time the system or any code accesses the controller’s <code class="code-voice">view</code> property.
</p>
</li><li class="item"><p class="para">
  <code class="code-voice">viewWillAppear()</code>—Called just before the view controller’s content view is added to the app’s view hierarchy. Use this method to trigger any operations that need to occur before the content view is presented onscreen. Despite the name, just because the system calls this method, it does not guarantee that the content view will become visible. The view may be obscured by other views or hidden. This method simply indicates that the content view is about to be added to the app’s view hierarchy.
</p>
</li><li class="item"><p class="para">
  <code class="code-voice">viewDidAppear()</code>—Called just after the view controller’s content view has been added to the app’s view hierarchy. Use this method to trigger any operations that need to occur as soon as the view is presented onscreen, such as fetching data or showing an animation. Despite the name, just because the system calls this method, it does not guarantee that the content view is visible. The view may be obscured by other views or hidden. This method simply indicates that the content view has been added to the app’s view hierarchy.
</p>
</li><li class="item"><p class="para">
  <code class="code-voice">viewWillDisappear()</code>—Called just before the view controller’s content view is removed from the app’s view hierarchy. Use this method to perform cleanup tasks like committing changes or resigning the first responder status. Despite the name, the system does not call this method just because the content view will be hidden or obscured. This method is only called when the content view is about to be removed from the app’s view hierarchy.
</p>
</li><li class="item"><p class="para">
  <code class="code-voice">viewDidDisappear()</code>—Called just after the view controller’s content view has been removed from the app’s view hierarchy. Use this method to perform additional teardown activities. Despite the name, the system does not call this method just because the content view has become hidden or obscured. This method is only called when the content view has been removed from the app’s view hierarchy.
</p>
</li>
</ul><p class="para">
  You’ll be using some of these methods in the FoodTracker app to load and display your data. In fact, if you recall, you’ve already written some code in the <code class="code-voice">viewDidLoad()</code> method of <code class="code-voice">ViewController</code>:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">override</span> <span class="kt">func</span> <span class="vc">viewDidLoad</span>() {</code></li>
            <li><code class="code-voice">    <span class="kt">super</span>.<span class="vc">viewDidLoad</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Handle the text field’s user input through delegate callbacks.</span></code></li>
            <li><code class="code-voice">    <span class="vc">nameTextField</span>.<span class="vc">delegate</span> = <span class="kt">self</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  This style of app design where view controllers serve as the communication pipeline between your views and your data model is known as <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW52" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW52" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_9&quot;;return this.s_oc?this.s_oc(e):true">MVC (Model-View-Controller)</a></span>. In this pattern, models keep track of your app’s data, views display your user interface and make up the content of an app, and controllers manage your views. By responding to user actions and populating views with content from the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW35" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW35" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_10&quot;;return this.s_oc?this.s_oc(e):true">data model</a></span>, controllers serve as a gateway for communication between the model and views. MVC is central to a good design for any iOS app, and so far, the FoodTracker app has been built along MVC principles.
</p><p class="para">
  As you keep the MVC pattern in mind for rest of the app’s design, it’s time to take your basic user interface to the next level, and add an image to the meal scene.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW5"></a>
  <h3 class="section-name" tabindex="0">Add a Meal Photo</h3>
  <p class="para">
  The next step in finishing the meal scene is adding a way to display a photo of a particular meal. For this, you’ll use an image view (<code class="code-voice">UIImageView</code>), a user interface element that displays a picture.
</p><p class="para">
  <strong class="inline-head">To add an image view to your scene</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open your <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW8" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW8" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_11&quot;;return this.s_oc?this.s_oc(e):true">storyboard</a></span>, <code class="code-voice">Main.storyboard</code>.
</p>
</li><li class="item"><p class="para">
  Open the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW54" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW54" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_12&quot;;return this.s_oc?this.s_oc(e):true">Object library</a></span> in the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW72" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW72" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_13&quot;;return this.s_oc?this.s_oc(e):true">utility area</a></span>. (Alternatively, choose View &gt; Utilities &gt; Show Object Library.)
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/object_library_2x.png" alt="image: ../Art/object_library_2x.png" width="438" height="301">
</figure>
</li><li class="item"><p class="para">
  In the Object library, type <code class="code-voice">image view</code> in the filter field to find the Image View object quickly.
</p>
</li><li class="item"><p class="para">
  Drag an Image View object from the Object library to your scene so that it’s in the stack view below the button.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_imageview_place_2x.png" alt="image: ../Art/WWVC_imageview_place_2x.png" width="680" height="465">
</figure>
</li><li class="item"><p class="para">
  With the image view selected, open the Size inspector <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/inspector_size_2x.png" alt="image: ../Art/inspector_size_2x.png" width="16" height="16"> in the utility area.
</p>
<p class="para">
  Recall that the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW82" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW82" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_14&quot;;return this.s_oc?this.s_oc(e):true">Size inspector</a></span> appears when you select the fifth button from the left in the inspector selector bar. It lets you edit the size and position of an object in your storyboard.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_inspector_size_2x.png" alt="image: ../Art/WWVC_inspector_size_2x.png" width="272" height="575">
</figure>
</li><li class="item"><p class="para">
  In the Intrinsic Size field, select Placeholder. (This field is at the bottom of the Size inspector, so you’ll need to scroll down to it.)
</p>
</li><li class="item"><p class="para">
  Type <code class="code-voice">320</code> in both the Width and Height fields. Press Return.
</p>
<p class="para">
  A view’s <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW110" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW110" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_15&quot;;return this.s_oc?this.s_oc(e):true">intrinsic content size</a></span> is the preferred size for the view based on its content. An empty image view doesn’t have an intrinsic content size. As soon as you add an image to a view, its intrinsic content size is set to the image’s size. Providing a placeholder size gives the image a temporary intrinsic content size that you can use while designing your user interface. This value is only used while designing your interface in Interface Builder; at runtime, the layout engine uses the view’s actual intrinsic content size instead.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_placeholdersize_2x.png" alt="image: ../Art/WWVC_placeholdersize_2x.png" width="680" height="465">
</figure>
</li><li class="item"><p class="para">
  On the bottom right of the canvas, open the Pin menu.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/AL_pinmenu_2x.png" alt="image: ../Art/AL_pinmenu_2x.png" width="129" height="64">
</figure>
</li><li class="item"><p class="para">
  Select the checkbox next to Aspect Ratio.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_imageview_aspectratio_2x.png" alt="image: ../Art/WWVC_imageview_aspectratio_2x.png" width="680" height="693">
</figure>
</li><li class="item"><p class="para">
  In the Pin menu, click the Add 1 Constraints button.
</p>
<p class="para">
  Your image view now has a 1:1 aspect ratio, so it will always be a square.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_imageview_finalconstraints_2x.png" alt="image: ../Art/WWVC_imageview_finalconstraints_2x.png" width="416" height="712">
</figure>
</li><li class="item"><p class="para">
  With the image view selected, open the Attributes inspector <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/inspector_attributes_2x.png" alt="image: ../Art/inspector_attributes_2x.png" width="16" height="16">.
</p>
<p class="para">
  Recall that the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW19" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW19" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_16&quot;;return this.s_oc?this.s_oc(e):true">Attributes inspector</a></span> appears when you select the fourth button from the left in the inspector selector bar. It lets you edit the properties of an object in your storyboard.
</p>
</li><li class="item"><p class="para">
  In the Attributes inspector, find the Interaction field and select the User Interaction Enabled checkbox.
</p>
<p class="para">
  You’ll need this feature later to let users interact with the image view.
</p>
</li>
</ol>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW6"></a>
  <h3 class="section-name" tabindex="0">Display a Default Photo</h3>
  <p class="para">
  Add a placeholder image to let users know that they can interact with the image view to select a photo. Use this image from the <code class="code-voice">Images/</code> folder of the downloadable file at the end of this lesson, or use your own image.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/defaultphoto_2x.png" alt="image: ../Art/defaultphoto_2x.png" width="320" height="320">
</figure><p class="para">
  <strong class="inline-head">To add an image to your project</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW57" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW57" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_17&quot;;return this.s_oc?this.s_oc(e):true">project navigator</a></span>, select <code class="code-voice">Assets.xcassets</code> to view the asset catalog.
</p>
<p class="para">
  The <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW69" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW69" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_18&quot;;return this.s_oc?this.s_oc(e):true">asset catalog</a></span> is a place to store and organize your image assets for an app.
</p>
</li><li class="item"><p class="para">
  In the bottom left corner, click the plus (<code class="code-voice">+</code>) button and select New Image Set from the pop-up menu.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_assetcatalog_2x.png" alt="image: ../Art/WWVC_assetcatalog_2x.png" width="680" height="461">
</figure>
</li><li class="item"><p class="para">
  Double-click the image set name and rename it to <code class="code-voice">defaultPhoto</code>.
</p>
</li><li class="item"><p class="para">
  On your computer, select the image you want to add.
</p>
</li><li class="item"><p class="para">
  Drag and drop the image into the <code class="code-voice">2x</code> slot in the image set.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_defaultphoto_drag_2x.png" alt="image: ../Art/WWVC_defaultphoto_drag_2x.png" width="533" height="174">
</figure>
<p class="para">
  <code class="code-voice">2x</code> is the display resolution for the iPhone 7 <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW128" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW128" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_19&quot;;return this.s_oc?this.s_oc(e):true">Simulator</a></span> that you’re using in these lessons, so the image will look best at this resolution.
</p>
<div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-DontLinkElementID_41"></a>
  <aside class="aside">
    <p class="aside-title">Explore Further
    </p>
    	<p class="para">For more information on image resolutions, see Graphics &gt; Image Size and Resolution in <em class="u-book"><!-- a href="" target="_self" -->iOS Human Interface Guidelines<!-- /a --></em>.
    	</p>
    
  </aside>
</div>
</li>
</ol><p class="para">
  With the default placeholder image added to your project, set the image view to display it.
</p><p class="para">
  <strong class="inline-head">To display a default image in the image view</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open your storyboard.
</p>
</li><li class="item"><p class="para">
  In your storyboard, select the image view.
</p>
</li><li class="item"><p class="para">
  With the image view selected, open the Attributes inspector <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/inspector_attributes_2x.png" alt="image: ../Art/inspector_attributes_2x.png" width="16" height="16"> in the utility area.
</p>
</li><li class="item"><p class="para">
  In the Attributes inspector, find the field labeled Image and select <code class="code-voice">defaultPhoto</code>.
</p>
</li>
</ol><p class="para">
  <em>Checkpoint</em>: Run your app. The default image displays in the image view.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_sim_finalUI_2x.png" alt="image: ../Art/WWVC_sim_finalUI_2x.png" width="387" height="679">
</figure>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW7"></a>
  <h3 class="section-name" tabindex="0">Connect the Image View to Code</h3>
  <p class="para">
  Now, you need to implement the functionality to change the image in this image view at runtime. First, you need to connect the image view to the code in <code class="code-voice">ViewController.swift</code>.
</p><p class="para">
  <strong class="inline-head">To connect the image view to the ViewController.swift code</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Click the Assistant button in the Xcode toolbar near the top right corner of Xcode to open the assistant editor. 
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/assistant_editor_toggle_2x.png" alt="image: ../Art/assistant_editor_toggle_2x.png" width="307" height="101">
</figure>
</li><li class="item"><p class="para">
  If you want more space to work, collapse the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW57" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW57" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_20&quot;;return this.s_oc?this.s_oc(e):true">project navigator</a></span> and <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW72" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW72" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_21&quot;;return this.s_oc?this.s_oc(e):true">utility area</a></span> by clicking the Navigator and Utilities buttons in the Xcode toolbar.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/navigator_utilities_toggle_on_2x.png" alt="image: ../Art/navigator_utilities_toggle_on_2x.png" width="372" height="100">
</figure>
<p class="para">
  You can also collapse the outline view.
</p>
</li><li class="item"><p class="para">
  In your storyboard, select the image view.
</p>
</li><li class="item"><p class="para">
  Control-drag from the image view on your canvas to the code display in the editor on the right, stopping the drag at the line just below the existing outlets in <code class="code-voice">ViewController.swift</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_imageview_dragoutlet_2x.png" alt="image: ../Art/WWVC_imageview_dragoutlet_2x.png" width="680" height="461">
</figure>
</li><li class="item"><p class="para">
  In the dialog that appears, for Name, type <code class="code-voice">photoImageView</code>. Leave the rest of the options as they are.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_imageview_addoutlet_2x.png" alt="image: ../Art/WWVC_imageview_addoutlet_2x.png" width="680" height="461">
</figure>
</li><li class="item"><p class="para">
  Click Connect. 
</p>
<p class="para">
  Xcode adds the necessary code to <code class="code-voice">ViewController.swift</code> to store a reference to the image view and configures the storyboard to set up that connection.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBOutlet</span> <span class="kt">weak</span> <span class="kt">var</span> <span class="vc">photoImageView</span>: <span class="n"><!-- a href="" -->UIImageView<!-- /a --></span>!</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  You can now access the image view from code to change its image, but how do you know when to change the image? You need to give users a way to indicate that they want to change the image—for example, by tapping the image view. Then, you’ll define an <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW23" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW23" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_22&quot;;return this.s_oc?this.s_oc(e):true">action</a></span> method to change the image when a tap occurs.
</p><p class="para">
  There’s a nuanced distinction between <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW16" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW16" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_23&quot;;return this.s_oc?this.s_oc(e):true">views</a></span> and <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW17" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW17" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_24&quot;;return this.s_oc?this.s_oc(e):true">controls</a></span>, which are specialized versions of views that respond to user actions in a specific way. A view displays content, whereas a control is used to modify the content in some way. A control (<code class="code-voice">UIControl</code>) is a subclass of <code class="code-voice">UIView</code>. In fact, you’ve already worked with both views (labels, image views) and controls (text fields, buttons) in your interface.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW8"></a>
  <h3 class="section-name" tabindex="0">Create a Gesture Recognizer</h3>
  <p class="para">
  An image view isn’t a control, so it’s not designed to respond to input in the same way that button or a slider might. For example, you can’t simply create an action method that’s triggered when a user taps on an image view. (If you try to Control-drag from the image view to your code, you’ll notice that you can’t select Action in the Connection field.)
</p><p class="para">
  Fortunately, it’s quite easy to give a view the same capabilities as a control by adding a gesture recognizer to it. <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW42" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW42" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_25&quot;;return this.s_oc?this.s_oc(e):true">Gesture recognizers</a></span> are objects that you attach to a view that allow the view to respond to the user the way a control does. Gesture recognizers interpret touches to determine whether they correspond to a specific gesture, such as a swipe, pinch, or rotation. You can write an action method that is called when a gesture recognizer recognizes its assigned gesture, which is exactly what you need to do for the image view.
</p><p class="para">
  Attach a tap gesture recognizer (<code class="code-voice">UITapGestureRecognizer</code>) to the image view, which will recognize when a user has tapped the image view. You can do this easily in your storyboard.
</p><p class="para">
  <strong class="inline-head">To add a tap gesture recognizer to your image view</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open the Object library (Choose View &gt; Utilities &gt; Show Object Library).
</p>
</li><li class="item"><p class="para">
  In the Object library, type <code class="code-voice">tap gesture</code> in the filter field to find the Tap Gesture Recognizer object quickly.
</p>
</li><li class="item"><p class="para">
  Drag a Tap Gesture Recognizer object from the Object library to your scene, and place it on top of the image view.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_gesturerecognizer_drag_2x.png" alt="image: ../Art/WWVC_gesturerecognizer_drag_2x.png" width="465" height="712">
</figure>
<p class="para">
  The Tap Gesture Recognizer object appears in the meal <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW63" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW63" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_26&quot;;return this.s_oc?this.s_oc(e):true">scene dock</a></span>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_scenedock_2x.png" alt="image: ../Art/WWVC_scenedock_2x.png" width="389" height="113">
</figure>
</li>
</ol>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW9"></a>
  <h3 class="section-name" tabindex="0">Connect the Gesture Recognizer to Code</h3>
  <p class="para">
  Now, connect that gesture recognizer to an action method in your code.
</p><p class="para">
  <strong class="inline-head">To connect the gesture recognizer to the ViewController.swift code</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Control-drag from the gesture recognizer in the scene dock to the code display in the editor on the right, stopping the drag at the line below the <code class="code-voice">//MARK: Actions</code> <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW31" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW31" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_27&quot;;return this.s_oc?this.s_oc(e):true">comment</a></span> in <code class="code-voice">ViewController.swift</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_gesturerecognizer_dragaction_2x.png" alt="image: ../Art/WWVC_gesturerecognizer_dragaction_2x.png" width="680" height="461">
</figure>
</li><li class="item"><p class="para">
  In the dialog that appears, for Connection, select Action.
</p>
</li><li class="item"><p class="para">
  For Name, type <code class="code-voice">selectImageFromPhotoLibrary</code>.
</p>
</li><li class="item"><p class="para">
  For Type, select <code class="code-voice">UITapGestureRecognizer</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_gesturerecognizer_addaction_2x.png" alt="image: ../Art/WWVC_gesturerecognizer_addaction_2x.png" width="680" height="461">
</figure>
</li><li class="item"><p class="para">
  Click Connect. 
</p>
<p class="para">
  Xcode adds the necessary code to <code class="code-voice">ViewController.swift</code> to set up the action.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBAction</span> <span class="kt">func</span> <span class="vc">selectImageFromPhotoLibrary</span>(<span class="kt">_</span> <span class="vc">sender</span>: <span class="n"><!-- a href="" -->UITapGestureRecognizer<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-SW10"></a>
  <h3 class="section-name" tabindex="0">Create an Image Picker to Respond to User Taps</h3>
  <p class="para">
  When a user taps the image view, they should be able to choose a photo from a collection of photos, or take one of their own. Fortunately, the <code class="code-voice">UIImagePickerController</code> class has this behavior built into it. An image picker controller manages the user interface for taking pictures and for choosing saved images to use in your app. And just as you need a text field <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW36" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW36" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_28&quot;;return this.s_oc?this.s_oc(e):true">delegate</a></span> when you work with a text field, you need an image picker controller delegate to work with an image picker controller. The name of that delegate <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW59" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW59" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_29&quot;;return this.s_oc?this.s_oc(e):true">protocol</a></span> is <code class="code-voice">UIImagePickerControllerDelegate</code>, and the object that you’ll define as the image picker controller’s delegate is <code class="code-voice">ViewController.</code>
</p><p class="para">
  First, <code class="code-voice">ViewController</code> needs to adopt the <code class="code-voice">UIImagePickerControllerDelegate</code> protocol. Because <code class="code-voice">ViewController</code> will be in charge of presenting the image picker controller, it also needs to adopt the <code class="code-voice">UINavigationControllerDelegate</code> protocol, which simply lets <code class="code-voice">ViewController</code> take on some basic navigation responsibilities.
</p><p class="para">
  <strong class="inline-head">To adopt the UIImagePickerControllerDelegate and UINavigationControllerDelegate protocols</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Return to the standard editor by clicking the Standard button.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/standard_toggle_2x.png" alt="image: ../Art/standard_toggle_2x.png" width="371" height="86">
</figure>
<p class="para">
  Expand the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.
</p>
</li><li class="item"><p class="para">
  In the project navigator, select <code class="code-voice">ViewController.swift</code>.
</p>
</li><li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, find the <code class="code-voice">class</code> line, which should look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">ViewController</span>: <span class="n"><!-- a href="" -->UIViewController<!-- /a --></span>, <span class="n"><!-- a href="" -->UITextFieldDelegate<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  After <code class="code-voice">UITextFieldDelegate</code>, add a comma (<code class="code-voice">,</code>) and <code class="code-voice">UIImagePickerControllerDelegate</code> to adopt the protocol.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">ViewController</span>: <span class="n"><!-- a href="" -->UIViewController<!-- /a --></span>, <span class="n"><!-- a href="" -->UITextFieldDelegate<!-- /a --></span>, <span class="n"><!-- a href="" -->UIImagePickerControllerDelegate<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  After <code class="code-voice">UIImagePickerControllerDelegate</code>, add a comma (<code class="code-voice">,</code>) and <code class="code-voice">UINavigationControllerDelegate</code> to adopt the protocol.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">ViewController</span>: <span class="n"><!-- a href="" -->UIViewController<!-- /a --></span>, <span class="n"><!-- a href="" -->UITextFieldDelegate<!-- /a --></span>, <span class="n"><!-- a href="" -->UIImagePickerControllerDelegate<!-- /a --></span>, <span class="n"><!-- a href="" -->UINavigationControllerDelegate<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  At this point, you can go back to the action method you defined, <code class="code-voice">selectImageFromPhotoLibrary(_:)</code>, and finish its implementation.
</p><p class="para">
  <strong class="inline-head">To implement the selectImageFromPhotoLibrary(_:) action method</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, find the <code class="code-voice">selectImageFromPhotoLibrary(_:)</code> action method you added earlier.
</p>
<p class="para">
  It should look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBAction</span> <span class="kt">func</span> <span class="vc">selectImageFromPhotoLibrary</span>(<span class="kt">_</span> <span class="vc">sender</span>: <span class="n"><!-- a href="" -->UITapGestureRecognizer<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  In the method implementation, between the curly braces (<code class="code-voice">{}</code>), add this code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Hide the keyboard.</span></code></li>
            <li><code class="code-voice"><span class="vc">nameTextField</span>.<span class="vc">resignFirstResponder</span>()</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This code ensures that if the user taps the image view while typing in the text field, the keyboard is dismissed properly.
</p>
</li><li class="item"><p class="para">
  Add this code to create an image picker controller:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// UIImagePickerController is a view controller that lets a user pick media from their photo library.</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">imagePickerController</span> = <span class="vc">UIImagePickerController</span>()</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Add this code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Only allow photos to be picked, not taken.</span></code></li>
            <li><code class="code-voice"><span class="vc">imagePickerController</span>.<span class="vc">sourceType</span> = .<span class="vc">photoLibrary</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This line of code sets the image picker controller’s source, or the place where it gets its images. The <code class="code-voice">.photoLibrary</code> option uses the simulator’s camera roll.
</p>
<p class="para">
  The type of <code class="code-voice">imagePickerController.sourceType</code> is known to be <code class="code-voice">UIImagePickerControllerSourceType</code>, which is an <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW88" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW88" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_30&quot;;return this.s_oc?this.s_oc(e):true">enumeration</a></span>. This means you can write its value as the abbreviated form <code class="code-voice">.photoLibrary</code> instead of <code class="code-voice">UIImagePickerControllerSourceType.photoLibrary</code>. Recall that you can use the abbreviated form anytime the enumeration value’s type is already known.
</p>
</li><li class="item"><p class="para">
  Add this code to set the image picker controller’s delegate to <code class="code-voice">ViewController</code>:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Make sure ViewController is notified when the user picks an image.</span></code></li>
            <li><code class="code-voice"><span class="vc">imagePickerController</span>.<span class="vc">delegate</span> = <span class="kt">self</span></code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Below the previous line, add this line of code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="vc">present</span>(<span class="vc">imagePickerController</span>, <span class="vc">animated</span>: <span class="kt">true</span>, <span class="vc">completion</span>: <span class="kt">nil</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  <code class="code-voice">present(_:animated:completion:)</code> is a method being called on <code class="code-voice">ViewController</code>. Although it’s not written explicitly, this method is executed on an implicit <code class="code-voice">self</code> object. The method asks <code class="code-voice">ViewController</code> to present the view controller defined by <code class="code-voice">imagePickerController</code>. Passing <code class="code-voice">true</code> to the <code class="code-voice">animated</code> parameter animates the presentation of the image picker controller. The <code class="code-voice">completion</code> parameter refers to a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW30" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW30" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_31&quot;;return this.s_oc?this.s_oc(e):true">completion handler</a></span>, a piece of code that executes after this method completes. Because you don’t need to do anything else, you indicate that you don’t need to execute a completion handler by passing in <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW5" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW5" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_32&quot;;return this.s_oc?this.s_oc(e):true">nil</a></span>.
</p>
</li>
</ol><p class="para">
  Your <code class="code-voice">selectImageFromPhotoLibrary(_:)</code> action method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBAction</span> <span class="kt">func</span> <span class="vc">selectImageFromPhotoLibrary</span>(<span class="kt">_</span> <span class="vc">sender</span>: <span class="n"><!-- a href="" -->UITapGestureRecognizer<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Hide the keyboard.</span></code></li>
            <li><code class="code-voice">    <span class="vc">nameTextField</span>.<span class="vc">resignFirstResponder</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// UIImagePickerController is a view controller that lets a user pick media from their photo library.</span></code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">imagePickerController</span> = <span class="vc">UIImagePickerController</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Only allow photos to be picked, not taken.</span></code></li>
            <li><code class="code-voice">    <span class="vc">imagePickerController</span>.<span class="vc">sourceType</span> = .<span class="vc">photoLibrary</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Make sure ViewController is notified when the user picks an image.</span></code></li>
            <li><code class="code-voice">    <span class="vc">imagePickerController</span>.<span class="vc">delegate</span> = <span class="kt">self</span></code></li>
            <li><code class="code-voice">    <span class="vc">present</span>(<span class="vc">imagePickerController</span>, <span class="vc">animated</span>: <span class="kt">true</span>, <span class="vc">completion</span>: <span class="kt">nil</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  After an image picker controller is presented, you interact with it through the delegate methods. To give users the ability to select a picture, you’ll need to implement two of the delegate methods defined in <code class="code-voice">UIImagePickerControllerDelegate</code>:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">imagePickerControllerDidCancel</span>(<span class="kt">_</span> <span class="vc">picker</span>: <span class="n"><!-- a href="" -->UIImagePickerController<!-- /a --></span>)</code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">imagePickerController</span>(<span class="kt">_</span> <span class="vc">picker</span>: <span class="n"><!-- a href="" -->UIImagePickerController<!-- /a --></span>, <span class="vc">didFinishPickingMediaWithInfo</span> <span class="vc">info</span>: [<span class="n"><!-- a href="" -->String<!-- /a --></span> : <span class="kt">Any</span>])</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  The first of these, <code class="code-voice">imagePickerControllerDidCancel(_:)</code>, gets called when a user taps the image picker’s Cancel button. This method gives you a chance to dismiss the <code class="code-voice">UIImagePickerController</code> (and optionally, do any necessary cleanup).
</p><p class="para">
  <strong class="inline-head">To implement the imagePickerControllerDidCancel(_:) method</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, right above the <code class="code-voice">//MARK: Actions</code> section, add the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: UIImagePickerControllerDelegate</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This is a comment to help you (and anybody else who reads your code) navigate through your code and identify that this section applies to the image picker implementation.
</p>
</li><li class="item"><p class="para">
  Below the comment you just added, add the following method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">imagePickerControllerDidCancel</span>(<span class="kt">_</span> <span class="vc">picker</span>: <span class="n"><!-- a href="" -->UIImagePickerController<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  In this method, add the following line of code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Dismiss the picker if the user canceled.</span></code></li>
            <li><code class="code-voice"><span class="vc">dismiss</span>(<span class="vc">animated</span>: <span class="kt">true</span>, <span class="vc">completion</span>: <span class="kt">nil</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This code animates the dismissal of the image picker controller.
</p>
</li>
</ol><p class="para">
  Your <code class="code-voice">imagePickerControllerDidCancel(_:)</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">imagePickerControllerDidCancel</span>(<span class="kt">_</span> <span class="vc">picker</span>: <span class="n"><!-- a href="" -->UIImagePickerController<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="c">// Dismiss the picker if the user canceled.</span></code></li>
            <li><code class="code-voice">    <span class="vc">dismiss</span>(<span class="vc">animated</span>: <span class="kt">true</span>, <span class="vc">completion</span>: <span class="kt">nil</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  The second <code class="code-voice">UIImagePickerControllerDelegate</code> method that you need to implement, <code class="code-voice">imagePickerController(_:didFinishPickingMediaWithInfo:)</code>, gets called when a user selects a photo. This method gives you a chance to do something with the image or images that a user selected from the picker. In your case, you’ll take the selected image and display it in your image view.
</p><p class="para">
  <strong class="inline-head">To implement the imagePickerController(_:didFinishPickingMediaWithInfo:) method</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Below the <code class="code-voice">imagePickerControllerDidCancel(_:)</code> method, add the following method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">imagePickerController</span>(<span class="kt">_</span> <span class="vc">picker</span>: <span class="n"><!-- a href="" -->UIImagePickerController<!-- /a --></span>, <span class="vc">didFinishPickingMediaWithInfo</span> <span class="vc">info</span>: [<span class="n"><!-- a href="" -->String<!-- /a --></span> : <span class="kt">Any</span>]) {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  In this method, add the following line of code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// The info dictionary may contain multiple representations of the image. You want to use the original.</span></code></li>
            <li><code class="code-voice"><span class="kt">guard</span> <span class="kt">let</span> <span class="vc">selectedImage</span> = <span class="vc">info</span>[<span class="vc">UIImagePickerControllerOriginalImage</span>] <span class="kt">as</span>? <span class="n"><!-- a href="" -->UIImage<!-- /a --></span> <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">fatalError</span>(<span class="s">"Expected a dictionary containing an image, but was provided the following: </span>\(<span class="vc">info</span>)<span class="s">"</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  The <code class="code-voice">info</code> dictionary always contains the original image that was selected in the picker. It may also contain an edited version of that image, if one exists. To keep things simple, you’ll use the original, unedited image for the meal photo.
</p>
<p class="para">
  This code accesses the original, unedited image from the <code class="code-voice">info</code> dictionary. It safely unwraps the optional returned by the dictionary and casts it as a <code class="code-voice">UIImage</code> object. The expectation is that the unwrapping and casting operations will never fail. If they do, it represents either a bug in your app that needs to be fixed at design time. The <code class="code-voice">fatalError()</code> method logs an error message to the console, including the contents of the <code class="code-voice">info</code> dictionary, and then causes the app to terminate—preventing it from continuing in an invalid state.
</p>
</li><li class="item"><p class="para">
  Add this line of code to set the selected image in the image view outlet that you created earlier:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Set photoImageView to display the selected image.</span></code></li>
            <li><code class="code-voice"><span class="vc">photoImageView</span>.<span class="vc">image</span> = <span class="vc">selectedImage</span></code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Add the following line of code to dismiss the image picker:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Dismiss the picker.</span></code></li>
            <li><code class="code-voice"><span class="vc">dismiss</span>(<span class="vc">animated</span>: <span class="kt">true</span>, <span class="vc">completion</span>: <span class="kt">nil</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  Your <code class="code-voice">imagePickerController(_:didFinishPickingMediaWithInfo)</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">imagePickerController</span>(<span class="kt">_</span> <span class="vc">picker</span>: <span class="n"><!-- a href="" -->UIImagePickerController<!-- /a --></span>, <span class="vc">didFinishPickingMediaWithInfo</span> <span class="vc">info</span>: [<span class="n"><!-- a href="" -->String<!-- /a --></span> : <span class="kt">Any</span>]) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// The info dictionary may contain multiple representations of the image. You want to use the original.</span></code></li>
            <li><code class="code-voice">    <span class="kt">guard</span> <span class="kt">let</span> <span class="vc">selectedImage</span> = <span class="vc">info</span>[<span class="vc">UIImagePickerControllerOriginalImage</span>] <span class="kt">as</span>? <span class="n"><!-- a href="" -->UIImage<!-- /a --></span> <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">        <span class="vc">fatalError</span>(<span class="s">"Expected a dictionary containing an image, but was provided the following: </span>\(<span class="vc">info</span>)<span class="s">"</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Set photoImageView to display the selected image.</span></code></li>
            <li><code class="code-voice">    <span class="vc">photoImageView</span>.<span class="vc">image</span> = <span class="vc">selectedImage</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Dismiss the picker.</span></code></li>
            <li><code class="code-voice">    <span class="vc">dismiss</span>(<span class="vc">animated</span>: <span class="kt">true</span>, <span class="vc">completion</span>: <span class="kt">nil</span>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint</em>: Run your app. What happens when you click on the image view?
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_app_abort_2x.png" alt="image: ../Art/WWVC_app_abort_2x.png" width="680" height="465">
</figure><p class="para">
  The app terminates with a <code class="code-voice">SIGABRT</code> signal. This means an error occurred that was serious enough to cause the app to abort. In this case, the problem occurs when you attempt to present the image picker. The system must ask the user for permission before accessing their photo library. In iOS 10 and later, you must provide a photo library usage description. This description explains why your app wants to access the photo library.
</p><p class="para">
  <strong class="inline-head">To add a photo library usage description</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In the project navigator, select <code class="code-voice">Info.plist</code>.
</p>
<p class="para">
  Xcode displays the property list editor in the editor area. A property list is a structured text file that contains essential configuration information about your app. The root of the property list is a dictionary that holds a set of predefined keys and their values.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_Property_List_Editor_2x.png" alt="image: ../Art/WWVC_Property_List_Editor_2x.png" width="680" height="465">
</figure>
<div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-DontLinkElementID_42"></a>
  <aside class="aside">
    <p class="aside-title">Explore Further
    </p>
    	<p class="para">For more information on possible <code class="code-voice">info.plist</code> keys, see <em class="u-book"><a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009247" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference_1&quot;;return this.s_oc?this.s_oc(e):true">Information Property List Key Reference</a></em>.
    	</p>
    
  </aside>
</div>
</li><li class="item"><p class="para">
  If the last item in the property list is an array, make sure the array is collapsed. If you add an item to an expanded array, it adds a child item. If you add an item to a collapsed array, it adds a sibling to the array.
</p>
</li><li class="item"><p class="para">
  To add a new item, hover over the last item in the property list, and click on the add button when it appears (or select Editor &gt; Add Item).
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_addInfoPlistItem_2x.png" alt="image: ../Art/WWVC_addInfoPlistItem_2x.png" width="476" height="129">
</figure>
</li><li class="item"><p class="para">
  In the pop-up menu, scroll down and choose Privacy - Photo Library Usage Description.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_addphotolibrarydescription_2x.png" alt="image: ../Art/WWVC_addphotolibrarydescription_2x.png" width="680" height="460">
</figure>
</li><li class="item"><p class="para">
  In the new row, make sure the Type is set to String. Then, double-click on the Value section and enter <code class="code-voice">Allows you to add photos to your meals.</code> 
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_addingDescriptionString_2x.png" alt="image: ../Art/WWVC_addingDescriptionString_2x.png" width="778" height="104">
</figure>
</li><li class="item"><p class="para">
  Press the Return key when you are done editing the description string.
</p>
</li>
</ol><p class="para">
  <em>Checkpoint</em>: Run your app again. This time you should be able to click the image view to pull up an image picker. You’ll need to click OK on the alert that asks for permission to give the FoodTracker app access to Photos. Then, you can click the Cancel button to dismiss the picker, or open Camera Roll and click an image to select it and set it as the image in the image view.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_sim_imagepicker_2x.png" alt="image: ../Art/WWVC_sim_imagepicker_2x.png" width="387" height="679">
</figure><p class="para">
  If you look through the photos available in the simulator, you’ll notice that it doesn’t include any photos of food. You can add your own images directly into the simulator to test the FoodTracker app with appropriate sample content. You can find a sample image within the <code class="code-voice">Images/</code> folder of the downloadable file at the end of this lesson, or use your own image.
</p><p class="para">
  <strong class="inline-head">To add images to iOS Simulator</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  If necessary, run your app in the simulator.
</p>
</li><li class="item"><p class="para">
  On your computer, select the images you want to add.
</p>
</li><li class="item"><p class="para">
  Drag and drop the images into the simulator.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_sim_dragphoto_2x.png" alt="image: ../Art/WWVC_sim_dragphoto_2x.png" width="380" height="675">
</figure>
<p class="para">
  The simulator opens the Photos app and shows the images you added.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_sim_choosephoto_2x.png" alt="image: ../Art/WWVC_sim_choosephoto_2x.png" width="387" height="679">
</figure>
</li>
</ol><p class="para">
  <em>Checkpoint</em>: Run your app. You should be able to tap the image view to pull up an image picker. Open Camera Roll, and click one of the images you added to the simulator to select it and set it as the image in the image view.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWVC_sim_selectedphoto_2x.png" alt="image: ../Art/WWVC_sim_selectedphoto_2x.png" width="387" height="679">
</figure>
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-DontLinkElementID_13"></a>
  <h3 class="section-name" tabindex="0">Wrapping Up</h3>
  <p class="para">
  In this lesson, you’ve learned about the view controller life cycle methods, and used them to configure your view controller’s content. You’ve also learned how to add gesture recognizers to a view, and how to select photos from the photo library. The scene is starting to look like a real app. In the next lesson, you’ll add a custom control to the scene.
</p><div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH6-DontLinkElementID_43"></a>
  <aside class="aside">
    <p class="aside-title">Note
    </p>
    	<p class="para">To see the completed sample project for this lesson, download the file and view it in Xcode.
    	</p>
    <p class="para">
  <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/WWDR_download_icon_withPadding_2x.png" alt="image: ../Art/WWDR_download_icon_withPadding_2x.png" width="15" height="17"><a href="https://developer.apple.com/sample-code/swift/downloads/03_WorkWithViewControllers.zip" onclick="s_objectID=&quot;https://developer.apple.com/sample-code/swift/downloads/03_WorkWithViewControllers.zip_1&quot;;return this.s_oc?this.s_oc(e):true">Download File</a>
</p>

  </aside>
</div>
  
</section>

</section>


 	<section id="next_previous" class="">
    		<p class="previous-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH22-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_4&quot;;return this.s_oc?this.s_oc(e):true">Connect the UI to Code</a></p>
  			<p class="next-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_4&quot;;return this.s_oc?this.s_oc(e):true">Implement a Custom Control</a></p>

    <p class="copyright">Copyright © 2018 Apple Inc. All rights reserved. 
  <a class="link" href="http://www.apple.com/legal/terms/site.html" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/legal/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true">Terms of Use</a> | 
  <a class="link" href="http://www.apple.com/privacy/" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true">Privacy Policy</a> | 
  <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_5&quot;;return this.s_oc?this.s_oc(e):true">Updated: 2016-12-08</a>
</p>
  </section>
</article>

    </div>
    <div id="big_button"></div>
    <footer id="footer">
  <script src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/devpubs-1.6.3.js" type="text/javascript" charset="utf-8"></script>
  <div id="_omniture_top">
<!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
<script type="text/javascript">
/* RSID: */
var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
</script>

<script type="text/javascript" src="./Start Developing iOS Apps (Swift)_ Work with View Controllers_files/s_code_h.js"></script>
<script type="text/javascript">
s.pageName=AC.Tracking.pageName();
s.channel="www.us.developer"

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code=s.t();if(s_code)document.write(s_code)</script>
<!-- End SiteCatalyst code version: H.8. -->
</div>

</footer>

    
  
    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback…</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We’re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect"> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples"> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art"> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo"> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send">

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>



</body></html>