<!DOCTYPE html>
<!-- saved from url=(0159)https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1 -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Start Developing iOS Apps (Swift): Connect the UI to Code</title>
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/style-1.6.3.css">
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/feedback-1.6.3.css">
   
<meta id="j-version" name="j-version" content="">
<meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42">
<meta id="document-version" name="document-version" content="1.5.3">
<meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Topic/General}">
<meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40015214">
<meta id="chapterId" name="chapterId" content="TP40015214-CH22">
<meta id="book-title" name="book-title" content="Start Developing iOS Apps (Swift)">
<meta id="book-resource-type" name="book-resource-type" content="Guide">
<meta id="book-root" name="book-root" content="./">
<meta id="book-json" name="book-json" content="book.json">
<meta id="date" name="date" content="2016-12-08">
<meta id="description" name="description" content="A hands-on introduction to iOS app development using Swift.">
<meta id="IndexTitle" name="IndexTitle" content="">
<meta id="resources-uri" name="resources-uri" content="../../../Resources/1282">
<link id="book-index-page" rel="Start" title="" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html">
<!-- , next_chapter: next_chapter, previous_chapter: previous_chapter -->
<link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html">
<link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html">
<meta id="devcenter" name="devcenter" content="&lt;!-- DEVCENTER_NAME --&gt;">
<meta id="devcenter-url" name="devcenter-url" content="&lt;!-- DEVCENTER_URL --&gt;">
<meta id="reflib" name="reflib" content="&lt;!-- REFLIB_NAME --&gt;">

<meta id="xcode-display" name="xcode-display" content="render">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
<meta id="platforms" name="platforms" content="iOS">
</head>

  <body id="roadmap" class="jazz">
    
    <header id="ios_header" class="hideOnPrint hideInXcode">
  <div class="content-wrapper">
    <p class="header-text">
    	<a href="https://developer.apple.com/library/archive/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true">Documentation Archive
 		</a>
 </p>
    <p id="wwdr"><img id="apple_logo" src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/apple2.png" height="14px" width="12px" aria-hidden="true"><a href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true">Developer</a></p>
  </div>
</header>

    <section id="valence">
  <div class="content-wrapper">
	<p id="hierarchial_navigation">
		<span id="book_title">Start Developing iOS Apps (Swift)</span>
	</p>
	<form id="search" class="hideInXcode" method="get" action="https://developer.apple.com/search/index.php" accept-charset="utf-8" autocomplete="off">
  <input type="search" id="ssi_SearchField" placeholder="Search Documentation Archive" name="q" autocomplete="off" tabindex="2">
</form>

	  
   
   



    <img id="shortstack" src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/shortstack_2x.png">
  </div>
</section>
    <div class="content-wrapper">
      <nav id="navigator" class="book-parts hideInXcode" role="navigation">
    <ul class="nav-parts">
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_1&quot;;return this.s_oc?this.s_oc(e):true">Getting Started</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_2&quot;;return this.s_oc?this.s_oc(e):true">Jump Right In<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name nav-part-active open-part">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_1&quot;;return this.s_oc?this.s_oc(e):true">Building the UI</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_2&quot;;return this.s_oc?this.s_oc(e):true">Build a Basic UI<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter nav-current-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH22-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_1&quot;;return this.s_oc?this.s_oc(e):true">Connect the UI to Code<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH6-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_1&quot;;return this.s_oc?this.s_oc(e):true">Work with View Controllers<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_1&quot;;return this.s_oc?this.s_oc(e):true">Implement a Custom Control<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH20-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_1&quot;;return this.s_oc?this.s_oc(e):true">Define Your Data Model<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_2&quot;;return this.s_oc?this.s_oc(e):true">Working with Table Views</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_3&quot;;return this.s_oc?this.s_oc(e):true">Create a Table View<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementNavigation.html#//apple_ref/doc/uid/TP40015214-CH16-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH16-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_2&quot;;return this.s_oc?this.s_oc(e):true">Implement Navigation<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementEditAndDeleteBehavior.html#//apple_ref/doc/uid/TP40015214-CH9-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH9-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_3&quot;;return this.s_oc?this.s_oc(e):true">Implement Edit and Delete Behavior<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/PersistData.html#//apple_ref/doc/uid/TP40015214-CH14-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH14-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/P_1&quot;;return this.s_oc?this.s_oc(e):true">Persist Data<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_1&quot;;return this.s_oc?this.s_oc(e):true">What’s Next?</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_2&quot;;return this.s_oc?this.s_oc(e):true">Where to Go from Here<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_1&quot;;return this.s_oc?this.s_oc(e):true">iOS and Swift Terminology</a>
          <ul class="nav-chapters">
              <li class="glossary nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_2&quot;;return this.s_oc?this.s_oc(e):true">Glossary<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li data-id="revision-history" class="part-name">
          <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_3&quot;;return this.s_oc?this.s_oc(e):true">Revision History</a>
          <ul class="nav-chapters">
            <li class="nav-chapter">
              <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_4&quot;;return this.s_oc?this.s_oc(e):true">Document Revision History</a>
            </li>
          </ul>
        </li>
    </ul>
</nav>

      <menu id="bashful" type="toolbar">
  <div class="shield"></div>
  <menuitem id="jump_to" class="menu-bar-item closed">
  <span>On This Page</span>
  <div class="chevron">
    <div class="chevy chevron-left"></div>
    <div class="chevy chevron-right"></div>
  </div>
  <menu type="list" class="details">
      <ul class="list-bullet">
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW2" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_4&quot;;return this.s_oc?this.s_oc(e):true">Learning Objectives</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW3" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_5&quot;;return this.s_oc?this.s_oc(e):true">Connect the UI to Source Code</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW6" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_6&quot;;return this.s_oc?this.s_oc(e):true">Process User Input</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-DontLinkElementID_3" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_7&quot;;return this.s_oc?this.s_oc(e):true">Wrapping Up</a>
          </li>
      </ul>
  </menu>
</menuitem>

</menu>
<div class="pixel-line"></div>
<div class="rubber-band-gap"></div>
<article class="chapter">
  <a name="//apple_ref/doc/uid/TP40015214-CH22"></a><a name="//apple_ref/doc/uid/TP40015214-CH22-SW1"></a>
  <h2 class="chapter-name chapter-name-short">Connect the UI to Code</h2>
  
  	<section class="section">
  		<p class="para">
  In this lesson, you’ll connect the basic <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW18" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW18" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_3&quot;;return this.s_oc?this.s_oc(e):true">user interface (UI)</a></span> of the FoodTracker app to code and define some actions a user can perform in that UI.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_sim_finalUI_2x.png" alt="image: ../Art/CUIC_sim_finalUI_2x.png" width="387" height="679">
</figure>

		</section> 
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH22-SW2"></a>
  <h3 class="section-name" tabindex="0">Learning Objectives</h3>
  <p class="para">
  At the end of the lesson, you’ll be able to:
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  Explain the relationship between a&nbsp;scene in a storyboard&nbsp;and the underlying&nbsp;view controller
</p>
</li><li class="item"><p class="para">
  Create&nbsp;outlet&nbsp;and&nbsp;action&nbsp;connections between UI elements in a storyboard and source code
</p>
</li><li class="item"><p class="para">
  Process&nbsp;user input&nbsp;from a text field and display the result in the&nbsp;UI
</p>
</li><li class="item"><p class="para">
  Make a class conform to a protocol
</p>
</li><li class="item"><p class="para">
  Understand the delegation pattern
</p>
</li><li class="item"><p class="para">
  Follow the&nbsp;target-action&nbsp;pattern when designing app architecture
</p>
</li>
</ul>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH22-SW3"></a>
  <h3 class="section-name" tabindex="0">Connect the UI to Source Code</h3>
  <p class="para">
  Elements in a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW8" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW8" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_4&quot;;return this.s_oc?this.s_oc(e):true">storyboard</a></span> are linked to source code. It’s important to understand the relationship that a storyboard has to the code you write.
</p><p class="para">
  In a storyboard, a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW62" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW62" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_5&quot;;return this.s_oc?this.s_oc(e):true">scene</a></span> represents one screen of content and typically one view controller. <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW7" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW7" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_6&quot;;return this.s_oc?this.s_oc(e):true">View controllers</a></span> implement your app’s behavior. A view controller manages a single content view with its hierarchy of subviews. View controllers coordinate the flow of information between the app’s <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW35" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW35" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_7&quot;;return this.s_oc?this.s_oc(e):true">data model</a></span>, which encapsulates the app’s data, and the views that display that data, manage the life cycle of their content views, handle orientation changes when the device is rotated, define the navigation within your app, and implement the behavior to respond to user input. All view controller objects in iOS are of type <code class="code-voice">UIViewController</code> or one of its subclasses.
</p><p class="para">
  You define the behavior of your view controllers in code by creating and implementing custom view controller <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW14" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW14" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_8&quot;;return this.s_oc?this.s_oc(e):true">subclasses</a></span>. You can then create a connection between those classes and scenes in your storyboard to get the behavior you defined in code and the user interface you defined in your storyboard.
</p><p class="para">
  Xcode already created one such class that you looked at earlier, <code class="code-voice">ViewController.swift</code>, and connected it to the scene you’re working on in your storyboard right now. In the future, as you add more scenes, you’ll make this connection yourself in the Identity inspector. The <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW80" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW80" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_9&quot;;return this.s_oc?this.s_oc(e):true">Identity inspector</a></span> lets you edit properties of an object in your storyboard related to that object’s identity, such as what class the object belongs to.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_inspector_identity_2x.png" alt="image: ../Art/CUIC_inspector_identity_2x.png" width="272" height="658">
</figure><p class="para">
  At runtime, your storyboard creates an instance of <code class="code-voice">ViewController</code>, your custom view controller subclass. The scene from your storyboard appears on the device’s screen, and the user interface’s behavior is defined in <code class="code-voice">ViewController.swift</code>.
</p><p class="para">
  Although the scene is connected to <code class="code-voice">ViewController.swift</code>, that’s not the only connection that needs to be made. To define interaction in your app, your view controller source code needs to be able to communicate with the views in your storyboard. You do this by defining additional connections—called outlets and actions—between the views in the storyboard and the view controller source code files.
</p>
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH22-SW4"></a>
  <h3 class="section-name" tabindex="0">Create Outlets for UI Elements</h3>
  <p class="para">
  <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW55" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW55" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_10&quot;;return this.s_oc?this.s_oc(e):true">Outlets</a></span> provide a way to reference interface objects—the objects you added to your storyboard—from source code files. To create an outlet, Control-drag from a particular object in your storyboard to a view controller file. This operation creates a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW58" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW58" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_11&quot;;return this.s_oc?this.s_oc(e):true">property</a></span> for the object in your view controller file, which lets you access and manipulate that object from code at runtime.
</p><p class="para">
  You’ll need to create outlets for the text field and label in your user interface to be able to reference them.
</p><p class="para">
  <strong class="inline-head">To connect the text field to the ViewController.swift code</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open your storyboard, <code class="code-voice">Main.storyboard</code>.
</p>
</li><li class="item"><p class="para">
  Click the Assistant button in the Xcode toolbar near the top right corner of Xcode to open the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW76" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW76" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_12&quot;;return this.s_oc?this.s_oc(e):true">assistant editor</a></span>. 
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/assistant_editor_toggle_2x.png" alt="image: ../Art/assistant_editor_toggle_2x.png" width="307" height="101">
</figure>
</li><li class="item"><p class="para">
  If you want more space to work, collapse the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW57" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW57" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_13&quot;;return this.s_oc?this.s_oc(e):true">project navigator</a></span> and <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW72" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW72" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_14&quot;;return this.s_oc?this.s_oc(e):true">utility area</a></span> by clicking the Navigator and Utilities buttons in the Xcode toolbar.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/navigator_utilities_toggle_on_2x.png" alt="image: ../Art/navigator_utilities_toggle_on_2x.png" width="372" height="100">
</figure>
<p class="para">
  You can also collapse the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW56" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW56" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_15&quot;;return this.s_oc?this.s_oc(e):true">outline view</a></span>.
</p>
</li><li class="item"><p class="para">
  In the editor selector bar, which appears at the top of the assistant editor, change the assistant editor from Preview to Automatic &gt; <code class="code-voice">ViewController.swift</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_switchtoviewcontroller_2x.png" alt="image: ../Art/CUIC_switchtoviewcontroller_2x.png" width="680" height="463">
</figure>
<p class="para">
  <code class="code-voice">ViewController.swift</code> displays in the editor on the right.
</p>
</li><li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, find the <code class="code-voice">class</code> line, which should look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">ViewController</span>: <span class="n"><!-- a href="" -->UIViewController<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  Below the <code class="code-voice">class</code> line, add the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Properties</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  You just added a comment to your source code. Recall that a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW31" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW31" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_16&quot;;return this.s_oc?this.s_oc(e):true">comment</a></span> is a piece of text in a source code file that doesn’t get compiled as part of the program but provides context or useful information about individual pieces of code.
</p>
<p class="para">
  A comment that begins with the characters <code class="code-voice">//MARK:</code> is a special type of comment that’s used to organize your code and to help you (and anybody else who reads your code) navigate through it. You’ll see this in action later. Specifically, the comment you added indicates that this is the section of your code that lists properties.
</p>
</li><li class="item"><p class="para">
  In your storyboard, select the text field.
</p>
</li><li class="item"><p class="para">
  Control-drag from the text field on your <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW6" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW6" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_17&quot;;return this.s_oc?this.s_oc(e):true">canvas</a></span> to the code display in the editor on the right, stopping the drag at the line below the comment you just added in <code class="code-voice">ViewController.swift</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_textfield_dragoutlet_2x.png" alt="image: ../Art/CUIC_textfield_dragoutlet_2x.png" width="680" height="455">
</figure>
</li><li class="item"><p class="para">
  In the dialog that appears, for Name, type <code class="code-voice">nameTextField</code>. Leave the rest of the options as they are.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_textfield_addoutlet_2x.png" alt="image: ../Art/CUIC_textfield_addoutlet_2x.png" width="680" height="454">
</figure>
</li><li class="item"><p class="para">
  Click Connect. 
</p>
<p class="para">
  Xcode adds the necessary code to <code class="code-voice">ViewController.swift</code> to store a reference to the text field and configures the storyboard to set up that connection.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBOutlet</span> <span class="kt">weak</span> <span class="kt">var</span> <span class="vc">nameTextField</span>: <span class="n"><!-- a href="" -->UITextField<!-- /a --></span>!</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  Take a minute to understand what’s happening in this line of code.
</p><p class="para">
  The <code class="code-voice">IBOutlet</code> attribute tells Xcode that you can connect to the <code class="code-voice">nameTextField</code> property from Interface Builder (which is why the attribute has the <code class="code-voice">IB</code> prefix). The <code class="code-voice">weak</code> keyword indicates that the reference does not prevent the system from deallocating the referenced object. Weak references help prevent reference cycles; however, to keep the object alive and in memory you need to make sure some other part of your app has a strong reference to the object. In this case, it’s the text field’s superview. A superview maintains a strong reference to all of its subviews. As long as the superview remains alive and in memory, all of the subviews remain alive as well. Similarly, the view controller has a strong reference to its content view—keeping the entire view hierarchy alive and in memory.
</p><p class="para">
  The rest of the declaration defines an <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW50" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW50" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_18&quot;;return this.s_oc?this.s_oc(e):true">implicitly unwrapped optional</a></span> variable of type <code class="code-voice">UITextField</code> named <code class="code-voice">nameTextField</code>. Pay careful attention to the exclamation point at the end of the type declaration. This exclamation point indicates that the type is an implicitly unwrapped optional, which is an <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW11" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW11" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_19&quot;;return this.s_oc?this.s_oc(e):true">optional</a></span> type that will always have a value after it is first set. When you access an implicitly unwrapped optional, the system assumes it has a valid value and automatically unwraps it for you. Note that this causes the app to terminate if the variable’s value has not yet been set.
</p><p class="para">
  When a view controller is loaded from a storyboard, the system instantiates the view hierarchy and assigns the appropriate values to all the view controller’s outlets. By the time the view controller’s <code class="code-voice">viewDidLoad()</code> method is called, the system has assigned valid values to all of the controller’s outlets, and you can safely access their contents.
</p><p class="para">
  Now, connect the label to your code in the same way you connected the text field.
</p><p class="para">
  <strong class="inline-head">To connect the label to the ViewController.swift code</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In your storyboard, select the label.
</p>
</li><li class="item"><p class="para">
  Control-drag from the label on your canvas to the code display in the editor on the right, stopping the drag at the line just below your <code class="code-voice">nameTextField</code> property in <code class="code-voice">ViewController.swift</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_label_dragoutlet_2x.png" alt="image: ../Art/CUIC_label_dragoutlet_2x.png" width="680" height="455">
</figure>
</li><li class="item"><p class="para">
  In the dialog that appears, for Name, type <code class="code-voice">mealNameLabel</code>. Leave the rest of the options as they are.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_label_addoutlet_2x.png" alt="image: ../Art/CUIC_label_addoutlet_2x.png" width="680" height="454">
</figure>
</li><li class="item"><p class="para">
  Click Connect.
</p>
</li>
</ol><p class="para">
  Again, Xcode adds the necessary code to <code class="code-voice">ViewController.swift</code> to store a reference to the label and configures the storyboard to set up that connection. This outlet is similar to the text field, except for its name and its type (which is <code class="code-voice">UILabel</code>, to match the type of object that’s in the storyboard).
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBOutlet</span> <span class="kt">weak</span> <span class="kt">var</span> <span class="vc">mealNameLabel</span>: <span class="n"><!-- a href="" -->UILabel<!-- /a --></span>!</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  You only need an outlet to an interface object if you plan to either access a value from the interface object or modify the interface object in your code. In this case, you need to set the text field’s <code class="code-voice">delegate</code> property and set the label’s <code class="code-voice">text</code> property. You won’t be modifying the button, so there’s no reason to create an outlet for it. 
</p><p class="para">
  Outlets let you refer to your interface elements in code, but you still need a way to respond whenever the user interacts with the elements. That’s where actions come in.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH22-SW5"></a>
  <h3 class="section-name" tabindex="0">Define an Action to Perform</h3>
  <p class="para">
  iOS apps are based on <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW38" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW38" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_20&quot;;return this.s_oc?this.s_oc(e):true">event-driven programming</a></span>. That is, the flow of the app is determined by events: system events and user actions. The user performs actions in the interface that trigger events in the app. These events result in the execution of the app’s logic and manipulation of its data. The app’s response to user action is then reflected back in the user interface. Because the user, rather than the developer, is in control of when certain pieces of the app code get executed, you want to identify exactly which actions a user can perform and what happens in response to those actions.
</p><p class="para">
  An <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW23" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW23" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_21&quot;;return this.s_oc?this.s_oc(e):true">action</a></span> (or an action method) is a piece of code that’s linked to an event that can occur in your app. When that event takes place, the system execute’s the action’s code. You can define an action method to accomplish anything from manipulating a piece of data to updating the user interface. You use actions to drive the flow of your app in response to user or system events.
</p><p class="para">
  You create an action the same way you create an outlet: Control-drag from a particular object in your storyboard to a view controller file. This operation creates a method in your view controller file that gets triggered when a user interacts with the object that the action method is attached to.
</p><p class="para">
  Start by creating a simple action that sets the label to <code class="code-voice">Default Text</code> whenever the user taps the Set Default Text button. (The code to set the label to the text in the text field is a bit more involved, so you’ll write that in the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW6" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH22-SW6" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_8&quot;;return this.s_oc?this.s_oc(e):true">Process User Input</a></span> section.)
</p><p class="para">
  <strong class="inline-head">To create a setDefaultLabelText action in the ViewController.swift code</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, just above the last curly brace (<code class="code-voice">}</code>), add the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Actions</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This comment indicates that this is the section of your code that lists actions.
</p>
</li><li class="item"><p class="para">
  In your storyboard, select the Set Default Label Text button.
</p>
</li><li class="item"><p class="para">
  Control-drag from the Set Default Label Text button on your canvas to the code display in the editor on the right, stopping the drag at the line below the comment you just added in <code class="code-voice">ViewController.swift</code>.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_button_dragaction_2x.png" alt="image: ../Art/CUIC_button_dragaction_2x.png" width="680" height="455">
</figure>
</li><li class="item"><p class="para">
  In the dialog that appears, for Connection select Action.
</p>
</li><li class="item"><p class="para">
  For Name, type <code class="code-voice">setDefaultLabelText</code>.
</p>
</li><li class="item"><p class="para">
  For Type, select <code class="code-voice">UIButton</code>.
</p>
<p class="para">
  You may have noticed that the value of the Type field defaults to <code class="code-voice">AnyObject</code>. In Swift, <code class="code-voice">AnyObject</code> is a type used to describe an object that can belong to any class. Specifying the type of this action method to be <code class="code-voice">UIButton</code> means that only button objects can connect to this action. Although this isn’t significant for the action you’re creating right now, it’s important to remember for later.
</p>
<p class="para">
  Leave the rest of the options as they are.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_button_addaction_2x.png" alt="image: ../Art/CUIC_button_addaction_2x.png" width="680" height="453">
</figure>
</li><li class="item"><p class="para">
  Click Connect.
</p>
</li>
</ol><p class="para">
  Xcode adds the necessary code to <code class="code-voice">ViewController.swift</code> to set up the action method.
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBAction</span> <span class="kt">func</span> <span class="vc">setDefaultLabelText</span>(<span class="kt">_</span> <span class="vc">sender</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  The <code class="code-voice">sender</code> parameter refers to the object that was responsible for triggering the action—in this case, a button. The <code class="code-voice">IBAction</code> attribute indicates that the method is an action that you can connect to from your storyboard in Interface Builder. The rest of the declaration declares a method by the name of <code class="code-voice">setDefaultLabelText(_:)</code>.
</p><p class="para">
  Right now, the method declaration is empty. The code to reset the value of the label is quite simple.
</p><p class="para">
  <strong class="inline-head">To implement the label reset action in the ViewController code</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, find the <code class="code-voice">setDefaultLabelText</code> action method you just added.
</p>
</li><li class="item"><p class="para">
  In the method implementation, between the curly braces (<code class="code-voice">{}</code>), add this line of code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="vc">mealNameLabel</span>.<span class="vc">text</span> = <span class="s">"Default Text"</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  As you might guess, this code sets the label’s <code class="code-voice">text</code> property to Default Text. 
</p>
<p class="para">
  Notice that you didn’t have to specify the type of Default Text, because Swift’s <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW70" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW70" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_22&quot;;return this.s_oc?this.s_oc(e):true">type inference</a></span> can see that you’re assigning to something of type <code class="code-voice">String</code> and can infer the type correctly.
</p>
</li>
</ol><p class="para">
  iOS handles all of the redrawing code for you, so this is actually all the code you need to write for now. Your <code class="code-voice">setDefaultLabelText(_:)</code> action method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">@IBAction</span> <span class="kt">func</span> <span class="vc">setDefaultLabelText</span>(<span class="kt">_</span> <span class="vc">sender</span>: <span class="n"><!-- a href="" -->UIButton<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">mealNameLabel</span>.<span class="vc">text</span> = <span class="s">"Default Text"</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint:</em> Test your changes by running the simulator. When you click the Set Default Label Text button, your <code class="code-voice">setDefaultLabelText(_:)</code> method is called, and the <code class="code-voice">mealNameLabel</code> object’s <code class="code-voice">text</code> value changes from <code class="code-voice">Meal Name</code> (the value set in your storyboard) to <code class="code-voice">Default Text</code> (the value set by the action). You should see the change in your user interface.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_sim_defaulttext_2x.png" alt="image: ../Art/CUIC_sim_defaulttext_2x.png" width="387" height="679">
</figure><p class="para">
  While changing the meal’s name to “Default Text” isn’t particularly useful, it does illustrate an important point. The behavior you just implemented is an example of the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW68" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW68" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_23&quot;;return this.s_oc?this.s_oc(e):true">target-action</a></span> pattern in iOS app design. Target-action is a design pattern where one object sends a message to another object when a specific event occurs. 
</p><p class="para">
  In this case:
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  The event is the user tapping the Set Default Text button.
</p>
</li><li class="item"><p class="para">
  The action is <code class="code-voice">setDefaultLabelText(_)</code>.
</p>
</li><li class="item"><p class="para">
  The target is <code class="code-voice">ViewController</code> (where the action method is defined).
</p>
</li><li class="item"><p class="para">
  The sender is the Set Default Label Text button.
</p>
</li>
</ul><p class="para">
  The system sends the message by calling the action method on the target and passing in the sender object. The sender is usually a control—such as a button, slider, or switch—that can trigger an event in response to user interaction such as a tap, drag, or value change. This pattern is extremely common in iOS app programming, and you’ll be seeing much more of it throughout the lessons.
</p>
  
</section>

</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH22-SW6"></a>
  <h3 class="section-name" tabindex="0">Process User Input</h3>
  <p class="para">
  At this point, users can reset the meal name label to a default value, but you really want to let users enter their own meal names using the text field. To keep things simple, you’ll update the <code class="code-voice">mealNameLabel</code> object’s <code class="code-voice">text</code> value whenever the user enters text into the text field and taps Return.
</p><p class="para">
  When you work with accepting user input from a text field, you need some help from a text field delegate. A <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW36" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW36" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_24&quot;;return this.s_oc?this.s_oc(e):true">delegate</a></span> is an object that acts on behalf of, or in coordination with, another object. The delegating object—in this case, the text field—keeps a reference to the other object—the delegate—and at the appropriate time, the delegating object sends a message to the delegate. The message tells the delegate about an event that the delegating object is about to handle or has just handled. The delegate may respond by for example, updating the appearance or state of itself or of other objects in the app, or returning a value that affects how an impending event is handled.
</p><p class="para">
  A text field’s delegate communicates with the text field while the user is editing the text, and knows when important events occur—such as when a user starts or stops editing text. The delegate can use this information to save or clear data at the right time, dismiss the keyboard, and so on.
</p><p class="para">
  Any object can serve as a delegate for another object as long as it <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW32" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW32" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_25&quot;;return this.s_oc?this.s_oc(e):true">conforms</a></span> to the appropriate <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW59" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW59" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_26&quot;;return this.s_oc?this.s_oc(e):true">protocol</a></span>. The protocol that defines a text field’s delegate is called <code class="code-voice">UITextFieldDelegate</code>. It is very common to make a view controller the delegate for objects that it manages. In this case, you’ll make your <code class="code-voice">ViewController</code> instance the text field’s delegate.
</p><p class="para">
  First, <code class="code-voice">ViewController</code> needs to adopt the <code class="code-voice">UITextFieldDelegate</code> protocol. You <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW26" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW26" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_27&quot;;return this.s_oc?this.s_oc(e):true">adopt</a></span> a protocol by listing it as part of the class declaration line.
</p><p class="para">
  <strong class="inline-head">To adopt the UITextFieldDelegate protocol</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  If the assistant editor is open, return to the standard editor by clicking the Standard button.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/standard_toggle_2x.png" alt="image: ../Art/standard_toggle_2x.png" width="371" height="86">
</figure>
</li><li class="item"><p class="para">
  Expand the project navigator and utility area by clicking the Navigator and Utilities buttons in the Xcode toolbar.
</p>
</li><li class="item"><p class="para">
  In the project navigator, select <code class="code-voice">ViewController.swift</code>.
</p>
</li><li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, find the <code class="code-voice">class</code> line, which should look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">ViewController</span>: <span class="n"><!-- a href="" -->UIViewController<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  After <code class="code-voice">UIViewController</code>, add a comma (<code class="code-voice">,</code>) and <code class="code-voice">UITextFieldDelegate</code> to adopt the protocol.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">ViewController</span>: <span class="n"><!-- a href="" -->UIViewController<!-- /a --></span>, <span class="n"><!-- a href="" -->UITextFieldDelegate<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  By adopting the <code class="code-voice">UITextFieldDelegate</code> protocol, you tell the compiler that the <code class="code-voice">ViewController</code> class can act as a valid text field delegate. This means you can implement the protocol’s methods to handle text input, and you can assign instances of the <code class="code-voice">ViewController</code> class as the delegate of the text field.
</p><p class="para">
  <strong class="inline-head">To set the ViewController object as the delegate of its nameTextField property</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, find the <code class="code-voice">viewDidLoad()</code> method, which should look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">override</span> <span class="kt">func</span> <span class="vc">viewDidLoad</span>() {</code></li>
            <li><code class="code-voice">    <span class="kt">super</span>.<span class="vc">viewDidLoad</span>()</code></li>
            <li><code class="code-voice">    <span class="c">// Do any additional setup after loading the view, typically from a nib.</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  The template implementation of this method includes a comment. You don’t need this comment in your method implementation, so go ahead and delete it.
</p>
</li><li class="item"><p class="para">
  Below the <code class="code-voice">super.viewDidLoad()</code> line, add a blank line and the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Handle the text field’s user input through delegate callbacks.</span></code></li>
            <li><code class="code-voice"><span class="vc">nameTextField</span>.<span class="vc">delegate</span> = <span class="kt">self</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  The <code class="code-voice">self</code> refers to the <code class="code-voice">ViewController</code> class, because it’s referenced inside the scope of the <code class="code-voice">ViewController</code> class definition.
</p>
<p class="para">
  You can add your own comments to help you understand what’s happening in your code.
</p>
</li>
</ol><p class="para">
  Your <code class="code-voice">viewDidLoad()</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">override</span> <span class="kt">func</span> <span class="vc">viewDidLoad</span>() {</code></li>
            <li><code class="code-voice">    <span class="kt">super</span>.<span class="vc">viewDidLoad</span>()</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Handle the text field’s user input through delegate callbacks.</span></code></li>
            <li><code class="code-voice">    <span class="vc">nameTextField</span>.<span class="vc">delegate</span> = <span class="kt">self</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  When a <code class="code-voice">ViewController</code> instance is loaded, it sets itself as the delegate of its <code class="code-voice">nameTextField</code> property.
</p><p class="para">
  The <code class="code-voice">UITextFieldDelegate</code> protocol defines eight optional methods. Just implement the ones you need to get the behaviors you desire. For now, you’ll need to implement two of these methods:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">textFieldShouldReturn</span>(<span class="kt">_</span> <span class="vc">textField</span>: <span class="n"><!-- a href="" -->UITextField<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Bool<!-- /a --></span></code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">textFieldDidEndEditing</span>(<span class="kt">_</span> <span class="vc">textField</span>: <span class="n"><!-- a href="" -->UITextField<!-- /a --></span>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  To understand when these methods get called and what they need to do, it’s important to know how text fields respond to user events. When the user taps a text field, it automatically becomes the first responder. In an app, the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW40" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW40" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_28&quot;;return this.s_oc?this.s_oc(e):true">first responder</a></span> is an object that is first on the line for receiving many kinds of app events, including key events, motion events, and action messages, among others. In other words, many of the events generated by the user are initially routed to the first responder.
</p><p class="para">
  As a result of the text field becoming the first responder, iOS displays the keyboard and begins an editing session for that text field. What a user types using that keyboard gets inserted into the text field.
</p><p class="para">
  When a user wants to finish editing the text field, the text field needs to resign its first-responder status. Because the text field will no longer be the active object in the app, events need to get routed to a more appropriate object.
</p><p class="para">
  This is where your implementation of <code class="code-voice">UITextFieldDelegate</code> methods comes in. You need to specify that the text field should resign its first-responder status when the user taps a button to end editing in the text field. You do this in the <code class="code-voice">textFieldShouldReturn(_:)</code> method, which gets called when the user taps Return (or in this case, Done) on the keyboard.
</p><p class="para">
  <strong class="inline-head">To implement the UITextFieldDelegate protocol method textFieldShouldReturn(_:)</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, right above the <code class="code-voice">//MARK: Actions</code> section, add the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: UITextFieldDelegate</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This comment is used to organize your code and to help you (and anybody else who reads your code) navigate through it. 
</p>
<p class="para">
  You’ve added several of these comments so far. Xcode lists each of these comments as a section title in the source code file’s <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW41" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW41" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_29&quot;;return this.s_oc?this.s_oc(e):true">Functions menu</a></span>, which appears if you click the name of the file at the top of the editor area. The Functions menu lets you jump to a section in your code quickly. You’ll notice the sections you denoted by <code class="code-voice">//MARK:</code> listed here. You can click on one of the section titles to jump to that section in the file.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_functionsmenu_2x.png" alt="image: ../Art/CUIC_functionsmenu_2x.png" width="680" height="471">
</figure>
</li><li class="item"><p class="para">
  Below the comment, add the following method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">textFieldShouldReturn</span>(<span class="kt">_</span> <span class="vc">textField</span>: <span class="n"><!-- a href="" -->UITextField<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Bool<!-- /a --></span> {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  In this method, add the following code to resign the text field’s first-responder status, and a comment to describe what the code does:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Hide the keyboard.</span></code></li>
            <li><code class="code-voice"><span class="vc">textField</span>.<span class="vc">resignFirstResponder</span>()</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Try typing the second line instead of just copying and pasting. You’ll find that <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW29" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW29" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_30&quot;;return this.s_oc?this.s_oc(e):true">code completion</a></span> is one of the great time-saving features of Xcode. When Xcode brings up the list of potential completions, scroll through the list until you find the one you want and then press Return. Xcode inserts the whole line for you.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_code_completion_2x.png" alt="image: ../Art/CUIC_code_completion_2x.png" width="680" height="451">
</figure>
</li><li class="item"><p class="para">
  In this method, add the following line of code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">return</span> <span class="kt">true</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This method returns a Boolean value that indicates whether the system should process the press of the Return key. In this case, you always want to respond to the user pressing the Return key, so just return <code class="code-voice">true</code>.
</p>
</li>
</ol><p class="para">
  Your <code class="code-voice">textFieldShouldReturn(_:)</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">textFieldShouldReturn</span>(<span class="kt">_</span> <span class="vc">textField</span>: <span class="n"><!-- a href="" -->UITextField<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Bool<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="c">// Hide the keyboard.</span></code></li>
            <li><code class="code-voice">    <span class="vc">textField</span>.<span class="vc">resignFirstResponder</span>()</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">true</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  The second method that you need to implement, <code class="code-voice">textFieldDidEndEditing(_:)</code>, is called after the text field resigns its first-responder status. Because you resign first responder status in <code class="code-voice">textFieldShouldReturn</code>, the system calls this method just after calling <code class="code-voice">textFieldShouldReturn</code>.
</p><p class="para">
  The <code class="code-voice">textFieldDidEndEditing(_:)</code> method gives you a chance to read the information entered into the text field and do something with it. In your case, you’ll take the text that’s in the text field and use it to change the value of your label.
</p><p class="para">
  <strong class="inline-head">To implement the UITextFieldDelegate protocol method textFieldDidEndEditing(_:)</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">ViewController.swift</code>, after the <code class="code-voice">textFieldShouldReturn(_:)</code> method, add the following method:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">textFieldDidEndEditing</span>(<span class="kt">_</span> <span class="vc">textField</span>: <span class="n"><!-- a href="" -->UITextField<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li><li class="item"><p class="para">
  In this method, add the following line of code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="vc">mealNameLabel</span>.<span class="vc">text</span> = <span class="vc">textField</span>.<span class="vc">text</span></code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  That’s all you need to do to see the result. Your <code class="code-voice">textFieldDidEndEditing(_:)</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">textFieldDidEndEditing</span>(<span class="kt">_</span> <span class="vc">textField</span>: <span class="n"><!-- a href="" -->UITextField<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">mealNameLabel</span>.<span class="vc">text</span> = <span class="vc">textField</span>.<span class="vc">text</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint:</em> Test your changes by running the simulator. You can select the text field and type text into it. When you click the Done button on the keyboard, the keyboard is dismissed and the label text changes to display the text in the text field. When you click the Set Default Label Text button, the label changes from what’s currently displayed in the label to <code class="code-voice">Default Text</code> (the value set by the action you defined earlier).
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/CUIC_sim_finalUI_2x.png" alt="image: ../Art/CUIC_sim_finalUI_2x.png" width="387" height="679">
</figure>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH22-DontLinkElementID_3"></a>
  <h3 class="section-name" tabindex="0">Wrapping Up</h3>
  <p class="para">
  In this lesson, you’ve used the assistant editor to add outlets and actions to your source code. You’ve also added code to update the user interface as the user interacts with the controls. The project is still just a relatively simple, single scene, but you will continue to add features and increase its complexity over the remaining lessons.
</p><div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH22-DontLinkElementID_17"></a>
  <aside class="aside">
    <p class="aside-title">Note
    </p>
    	<p class="para">To see the completed sample project for this lesson, download the file and view it in Xcode.
    	</p>
    <p class="para">
  <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/WWDR_download_icon_withPadding_2x.png" alt="image: ../Art/WWDR_download_icon_withPadding_2x.png" width="15" height="17"><a href="https://developer.apple.com/sample-code/swift/downloads/02_ConnectTheUIToTheCode.zip" onclick="s_objectID=&quot;https://developer.apple.com/sample-code/swift/downloads/02_ConnectTheUIToTheCode.zip_1&quot;;return this.s_oc?this.s_oc(e):true">Download File</a>
</p>

  </aside>
</div>
  
</section>


 	<section id="next_previous" class="">
    		<p class="previous-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_3&quot;;return this.s_oc?this.s_oc(e):true">Build a Basic UI</a></p>
  			<p class="next-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH6-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_2&quot;;return this.s_oc?this.s_oc(e):true">Work with View Controllers</a></p>

    <p class="copyright">Copyright © 2018 Apple Inc. All rights reserved. 
  <a class="link" href="http://www.apple.com/legal/terms/site.html" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/legal/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true">Terms of Use</a> | 
  <a class="link" href="http://www.apple.com/privacy/" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true">Privacy Policy</a> | 
  <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_5&quot;;return this.s_oc?this.s_oc(e):true">Updated: 2016-12-08</a>
</p>
  </section>
</article>

    </div>
    <div id="big_button"></div>
    <footer id="footer">
  <script src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/devpubs-1.6.3.js" type="text/javascript" charset="utf-8"></script>
  <div id="_omniture_top">
<!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
<script type="text/javascript">
/* RSID: */
var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
</script>

<script type="text/javascript" src="./Start Developing iOS Apps (Swift)_ Connect the UI to Code_files/s_code_h.js"></script>
<script type="text/javascript">
s.pageName=AC.Tracking.pageName();
s.channel="www.us.developer"

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code=s.t();if(s_code)document.write(s_code)</script>
<!-- End SiteCatalyst code version: H.8. -->
</div>

</footer>

    
  
    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback…</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We’re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect"> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples"> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art"> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo"> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send">

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>



</body></html>