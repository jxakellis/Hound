<!DOCTYPE html>
<!-- saved from url=(0160)https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW1 -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Start Developing iOS Apps (Swift): Define Your Data Model</title>
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/style-1.6.3.css">
  <link rel="stylesheet" type="text/css" href="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/feedback-1.6.3.css">
   
<meta id="j-version" name="j-version" content="">
<meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42">
<meta id="document-version" name="document-version" content="1.5.3">
<meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Topic/General}">
<meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40015214">
<meta id="chapterId" name="chapterId" content="TP40015214-CH20">
<meta id="book-title" name="book-title" content="Start Developing iOS Apps (Swift)">
<meta id="book-resource-type" name="book-resource-type" content="Guide">
<meta id="book-root" name="book-root" content="./">
<meta id="book-json" name="book-json" content="book.json">
<meta id="date" name="date" content="2016-12-08">
<meta id="description" name="description" content="A hands-on introduction to iOS app development using Swift.">
<meta id="IndexTitle" name="IndexTitle" content="">
<meta id="resources-uri" name="resources-uri" content="../../../Resources/1282">
<link id="book-index-page" rel="Start" title="" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html">
<!-- , next_chapter: next_chapter, previous_chapter: previous_chapter -->
<link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html">
<link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html">
<meta id="devcenter" name="devcenter" content="&lt;!-- DEVCENTER_NAME --&gt;">
<meta id="devcenter-url" name="devcenter-url" content="&lt;!-- DEVCENTER_URL --&gt;">
<meta id="reflib" name="reflib" content="&lt;!-- REFLIB_NAME --&gt;">

<meta id="xcode-display" name="xcode-display" content="render">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
<meta id="platforms" name="platforms" content="iOS">
</head>

  <body id="roadmap" class="jazz">
    
    <header id="ios_header" class="hideOnPrint hideInXcode">
  <div class="content-wrapper">
    <p class="header-text">
    	<a href="https://developer.apple.com/library/archive/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true">Documentation Archive
 		</a>
 </p>
    <p id="wwdr"><img id="apple_logo" src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/apple2.png" height="14px" width="12px" aria-hidden="true"><a href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true">Developer</a></p>
  </div>
</header>

    <section id="valence">
  <div class="content-wrapper">
	<p id="hierarchial_navigation">
		<span id="book_title">Start Developing iOS Apps (Swift)</span>
	</p>
	<form id="search" class="hideInXcode" method="get" action="https://developer.apple.com/search/index.php" accept-charset="utf-8" autocomplete="off">
  <input type="search" id="ssi_SearchField" placeholder="Search Documentation Archive" name="q" autocomplete="off" tabindex="2">
</form>

	  
   
   



    <img id="shortstack" src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/shortstack_2x.png">
  </div>
</section>
    <div class="content-wrapper">
      <nav id="navigator" class="book-parts hideInXcode" role="navigation">
    <ul class="nav-parts">
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_1&quot;;return this.s_oc?this.s_oc(e):true">Getting Started</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40015214-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/i_2&quot;;return this.s_oc?this.s_oc(e):true">Jump Right In<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name nav-part-active open-part">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_1&quot;;return this.s_oc?this.s_oc(e):true">Building the UI</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/B_2&quot;;return this.s_oc?this.s_oc(e):true">Build a Basic UI<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH22-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_1&quot;;return this.s_oc?this.s_oc(e):true">Connect the UI to Code<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH6-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/W_1&quot;;return this.s_oc?this.s_oc(e):true">Work with View Controllers<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_1&quot;;return this.s_oc?this.s_oc(e):true">Implement a Custom Control<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter nav-current-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH20-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_1&quot;;return this.s_oc?this.s_oc(e):true">Define Your Data Model<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_2&quot;;return this.s_oc?this.s_oc(e):true">Working with Table Views</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_3&quot;;return this.s_oc?this.s_oc(e):true">Create a Table View<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementNavigation.html#//apple_ref/doc/uid/TP40015214-CH16-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH16-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_2&quot;;return this.s_oc?this.s_oc(e):true">Implement Navigation<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementEditAndDeleteBehavior.html#//apple_ref/doc/uid/TP40015214-CH9-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH9-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_3&quot;;return this.s_oc?this.s_oc(e):true">Implement Edit and Delete Behavior<div class="pipe"></div></a>
              </li>
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/PersistData.html#//apple_ref/doc/uid/TP40015214-CH14-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH14-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/P_1&quot;;return this.s_oc?this.s_oc(e):true">Persist Data<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_1&quot;;return this.s_oc?this.s_oc(e):true">What’s Next?</a>
          <ul class="nav-chapters">
              <li class="conceptual-with-tasks nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Resources.html#//apple_ref/doc/uid/TP40015214-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_2&quot;;return this.s_oc?this.s_oc(e):true">Where to Go from Here<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li class="part-name">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_1&quot;;return this.s_oc?this.s_oc(e):true">iOS and Swift Terminology</a>
          <ul class="nav-chapters">
              <li class="glossary nav-chapter">
              	<a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_2&quot;;return this.s_oc?this.s_oc(e):true">Glossary<div class="pipe"></div></a>
              </li>
          </ul>
        </li>
        <li data-id="revision-history" class="part-name">
          <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_3&quot;;return this.s_oc?this.s_oc(e):true">Revision History</a>
          <ul class="nav-chapters">
            <li class="nav-chapter">
              <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_4&quot;;return this.s_oc?this.s_oc(e):true">Document Revision History</a>
            </li>
          </ul>
        </li>
    </ul>
</nav>

      <menu id="bashful" type="toolbar">
  <div class="shield"></div>
  <menuitem id="jump_to" class="menu-bar-item closed">
  <span>On This Page</span>
  <div class="chevron">
    <div class="chevy chevron-left"></div>
    <div class="chevy chevron-right"></div>
  </div>
  <menu type="list" class="details">
      <ul class="list-bullet">
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW2" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_2&quot;;return this.s_oc?this.s_oc(e):true">Learning Objectives</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW3" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_3&quot;;return this.s_oc?this.s_oc(e):true">Create a Data Model</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-SW4" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_4&quot;;return this.s_oc?this.s_oc(e):true">Test Your Data</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#//apple_ref/doc/uid/TP40015214-CH20-DontLinkElementID_5" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/D_5&quot;;return this.s_oc?this.s_oc(e):true">Wrapping Up</a>
          </li>
      </ul>
  </menu>
</menuitem>

</menu>
<div class="pixel-line"></div>
<div class="rubber-band-gap"></div>
<article class="chapter">
  <a name="//apple_ref/doc/uid/TP40015214-CH20"></a><a name="//apple_ref/doc/uid/TP40015214-CH20-SW1"></a>
  <h2 class="chapter-name chapter-name-short">Define Your Data Model</h2>
  
  	<section class="section">
  		<p class="para">
  In this lesson, you’ll define and test a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW35" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW35" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_3&quot;;return this.s_oc?this.s_oc(e):true">data model</a></span> for the FoodTracker app. A data model represents the structure of the information stored in an app.
</p>

		</section> 
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH20-SW2"></a>
  <h3 class="section-name" tabindex="0">Learning Objectives</h3>
  <p class="para">
  At the end of the lesson, you’ll be able to:
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  Create a&nbsp;data model
</p>
</li><li class="item"><p class="para">
  Write failable initializers for a custom class
</p>
</li><li class="item"><p class="para">
  Demonstrate a conceptual understanding of the difference between failable and nonfailable initializers
</p>
</li><li class="item"><p class="para">
  Test a&nbsp;data model by writing and running unit tests
</p>
</li>
</ul>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH20-SW3"></a>
  <h3 class="section-name" tabindex="0">Create a Data Model</h3>
  <p class="para">
  Now you’ll create a data model to store the information that the meal <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW62" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW62" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_4&quot;;return this.s_oc?this.s_oc(e):true">scene</a></span> needs to display. To do so, you define a simple <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW3" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW3" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_5&quot;;return this.s_oc?this.s_oc(e):true">class</a></span> with a name, a photo, and a rating.
</p><p class="para">
  <strong class="inline-head">To create a new data model class</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Choose File &gt; New &gt; File (or press Command-N).
</p>
</li><li class="item"><p class="para">
  At the top of the dialog that appears, select iOS.
</p>
</li><li class="item"><p class="para">
  Select Swift File, and click Next.
</p>
<p class="para">
  You’re using a different process to create this class than the <code class="code-voice">RatingControl</code> class you created earlier (iOS &gt; Source &gt; Cocoa Touch Class), because you’re defining a <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW79" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW79" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_6&quot;;return this.s_oc?this.s_oc(e):true">base class</a></span> for your data model, which means it doesn’t need to inherit from any other classes.
</p>
</li><li class="item"><p class="para">
  In the Save As field, type <code class="code-voice">Meal</code>.
</p>
</li><li class="item"><p class="para">
  The save location defaults to your project directory.
</p>
<p class="para">
  The Group option defaults to your app name, FoodTracker.
</p>
<p class="para">
  In the Targets section, your app is selected and the tests for your app are unselected.
</p>
</li><li class="item"><p class="para">
  Leave these defaults as they are, and click Create.
</p>
<p class="para">
  Xcode creates a file called <code class="code-voice">Meal.swift</code>. In the Project navigator, drag the <code class="code-voice">Meal.swift</code> file and position it under the other Swift files, if necessary.
</p>
</li>
</ol><p class="para">
  In Swift, you can represent the name using a <code class="code-voice">String</code>, the photo using a <code class="code-voice">UIImage</code>, and the rating using an <code class="code-voice">Int</code>. Because a meal always has a name and rating but might not have a photo, make the <code class="code-voice">UIImage</code> an <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW11" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW11" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_7&quot;;return this.s_oc?this.s_oc(e):true">optional</a></span>.
</p><p class="para">
  <strong class="inline-head">To define a data model for a meal</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  If the <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW76" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW76" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_8&quot;;return this.s_oc?this.s_oc(e):true">assistant editor</a></span> is open, return to the standard editor by clicking the Standard button.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/standard_toggle_2x.png" alt="image: ../Art/standard_toggle_2x.png" width="371" height="86">
</figure>
</li><li class="item"><p class="para">
  Open <code class="code-voice">Meal.swift</code>.
</p>
</li><li class="item"><p class="para">
  Change the import statement to import UIKit instead of Foundation:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">import</span> <span class="vc">UIKit</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  When Xcode creates a new Swift file, it imports the Foundation framework by default, letting you work with Foundation data structures in your code. You’ll also be working with a class from the UIKit framework, so you need to import UIKit. However, importing UIKit also gives you access to Foundation, so you can remove the redundant import to Foundation.
</p>
</li><li class="item"><p class="para">
  Below the import statement, add the following code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">Meal</span> {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">//MARK: Properties</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">name</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span></code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">photo</span>: <span class="n"><!-- a href="" -->UIImage<!-- /a --></span>?</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">rating</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This code defines the basic properties for the data you need to store. You’re making these variables (<code class="code-voice">var</code>) instead of constants (<code class="code-voice">let</code>) because they’ll need to change throughout the course of a <code class="code-voice">Meal</code> object’s lifetime.
</p>
</li><li class="item"><p class="para">
  Below the properties, add this code to declare an initializer:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Initialization</span></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">init</span>(<span class="vc">name</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span>, <span class="vc">photo</span>: <span class="n"><!-- a href="" -->UIImage<!-- /a --></span>?, <span class="vc">rating</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Recall that an <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW2" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW2" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_9&quot;;return this.s_oc?this.s_oc(e):true">initializer</a></span> is a method that prepares an instance of a class for use, which involves setting an initial value for each <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW58" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW58" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_10&quot;;return this.s_oc?this.s_oc(e):true">property</a></span> and performing any other setup or initialization. 
</p>
</li><li class="item"><p class="para">
  Fill out the basic implementation by setting the properties equal to the parameter values.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Initialize stored properties.</span></code></li>
            <li><code class="code-voice"><span class="kt">self</span>.<span class="vc">name</span> = <span class="vc">name</span></code></li>
            <li><code class="code-voice"><span class="kt">self</span>.<span class="vc">photo</span> = <span class="vc">photo</span></code></li>
            <li><code class="code-voice"><span class="kt">self</span>.<span class="vc">rating</span> = <span class="vc">rating</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  But what happens if you try to create a Meal with incorrect values, like an empty name or a negative rating? You’ll need to return <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW5" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW5" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_11&quot;;return this.s_oc?this.s_oc(e):true">nil</a></span> to indicate that the item couldn’t be created, and has set to the default values. You need to add code to check for those cases and to return <code class="code-voice">nil</code> if they fail.
</p>
</li><li class="item"><p class="para">
  Add the following code just above the code that initializes the stored properties.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Initialization should fail if there is no name or if the rating is negative.</span></code></li>
            <li><code class="code-voice"><span class="kt">if</span> <span class="vc">name</span>.<span class="vc">isEmpty</span> || <span class="vc">rating</span> &lt; <span class="m">0</span>  {</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This code validates the incoming parameters and returns <code class="code-voice">nil</code> if they contain invalid values.
</p>
<p class="para">
  Note, the compiler should complain with an error stating, “Only failable initializers can return ‘nil’.”
</p>
</li><li class="item"><p class="para">
  Click the error icon to bring up the fix-it.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/DYDM_init_fixit_2x.png" alt="image: ../Art/DYDM_init_fixit_2x.png" width="508" height="230">
</figure>
</li><li class="item"><p class="para">
  Double-click the fix it to update your initializer. The initializer’s signature should now look like this:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">init</span>?(<span class="vc">name</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span>, <span class="vc">photo</span>: <span class="n"><!-- a href="" -->UIImage<!-- /a --></span>?, <span class="vc">rating</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Failable initializers always start with either <code class="code-voice">init?</code> or <code class="code-voice">init!</code>. These initializers return <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW11" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW11" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_12&quot;;return this.s_oc?this.s_oc(e):true">optional</a></span> values or <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW50" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW50" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_13&quot;;return this.s_oc?this.s_oc(e):true">implicitly unwrapped optional</a></span> values, respectively. Optionals can either contain a valid value or <code class="code-voice">nil</code>. You must check to see if the optional has a value, and then safely unwrap the value before you can use it. Implicitly unwrapped optionals are optionals, but the system implicitly unwraps them for you.
</p>
<p class="para">
  In this case, your initializer returns an optional <code class="code-voice">Meal?</code> object.
</p>
</li>
</ol><p class="para">
  At this point, your <code class="code-voice">init?(name: String, photo: UIImage?, rating: Int)</code> initializer should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">init</span>?(<span class="vc">name</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span>, <span class="vc">photo</span>: <span class="n"><!-- a href="" -->UIImage<!-- /a --></span>?, <span class="vc">rating</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Initialization should fail if there is no name or if the rating is negative.</span></code></li>
            <li><code class="code-voice">    <span class="kt">if</span> <span class="vc">name</span>.<span class="vc">isEmpty</span> || <span class="vc">rating</span> &lt; <span class="m">0</span>  {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Initialize stored properties.</span></code></li>
            <li><code class="code-voice">    <span class="kt">self</span>.<span class="vc">name</span> = <span class="vc">name</span></code></li>
            <li><code class="code-voice">    <span class="kt">self</span>.<span class="vc">photo</span> = <span class="vc">photo</span></code></li>
            <li><code class="code-voice">    <span class="kt">self</span>.<span class="vc">rating</span> = <span class="vc">rating</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH20-DontLinkElementID_20"></a>
  <aside class="aside">
    <p class="aside-title">Explore Further
    </p>
    	<p class="para">As you will see in later lessons, failable initializers are harder to use because you need to unwrap the returned optional before using it. Some developers prefer to enforce an initializer’s contract using <code class="code-voice">assert()</code> or <code class="code-voice">precondition()</code> methods. These methods cause the app to terminate if the condition they are testing fails. This means that the calling code must validate the inputs before calling the initializer.
    	</p>
    <p class="para">
  For more information on initializers, see <!-- a href="" target="_self" -->Initialization<!-- /a -->. For information on adding inline sanity checks and preconditions to your code, see <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/swift/1541112-assert" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/swift/1541112-assert_1&quot;;return this.s_oc?this.s_oc(e):true">assert(_:_:file:line:)</a></code> and <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/swift/1540960-precondition" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/swift/1540960-precondition_1&quot;;return this.s_oc?this.s_oc(e):true">precondition(_:_:file:line:)</a></code>.
</p>

  </aside>
</div><p class="para">
  <em>Checkpoint:</em> Build your project by choosing Product &gt; Build (or pressing Command-B). You’re not using your new class for anything yet, but building it gives the compiler a chance to verify that you haven’t made any typing mistakes. If you have, fix them by reading through the warnings or errors that the compiler provides, and then look back over the instructions in this lesson to make sure everything looks the way it’s described here.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH20-SW4"></a>
  <h3 class="section-name" tabindex="0">Test Your Data</h3>
  <p class="para">
  Although your data model code builds, you haven’t fully incorporated it into your app yet. As a result, it’s hard to tell whether you’ve implemented everything correctly, and if you might encounter edge cases that you haven’t considered at runtime.
</p><p class="para">
  To address this uncertainty, you can write unit tests. <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW71" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW71" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_14&quot;;return this.s_oc?this.s_oc(e):true">Unit tests</a></span> are used for testing small, self-contained pieces of code to make sure they behave correctly. The <code class="code-voice">Meal</code> class is a perfect candidate for unit testing.
</p><p class="para">
  Xcode has already created a unit test file as part of the Single View Application template.
</p><p class="para">
  <strong class="inline-head">To look at the unit test file for FoodTracker</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  Open the FoodTrackerTests folder in the project navigator by clicking the disclosure triangle next to it.
</p>
<figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/DYDM_foodtrackertests_2x.png" alt="image: ../Art/DYDM_foodtrackertests_2x.png" width="261" height="335">
</figure>
</li><li class="item"><p class="para">
  Open <code class="code-voice">FoodTrackerTests.swift</code>.
</p>
</li>
</ol><p class="para">
  Take a moment to understand the code in the file so far.
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">import</span> <span class="vc">XCTest</span></code></li>
            <li><code class="code-voice"><span class="kt">@testable</span> <span class="kt">import</span> <span class="vc">FoodTracker</span></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">FoodTrackerTests</span>: <span class="n"><!-- a href="" -->XCTestCase<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">override</span> <span class="kt">func</span> <span class="vc">setUp</span>() {</code></li>
            <li><code class="code-voice">        <span class="kt">super</span>.<span class="vc">setUp</span>()</code></li>
            <li><code class="code-voice">        <span class="c">// Put setup code here. This method is called before the invocation of each test method in the class.</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">override</span> <span class="kt">func</span> <span class="vc">tearDown</span>() {</code></li>
            <li><code class="code-voice">        <span class="c">// Put teardown code here. This method is called after the invocation of each test method in the class.</span></code></li>
            <li><code class="code-voice">        <span class="kt">super</span>.<span class="vc">tearDown</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">testExample</span>() {</code></li>
            <li><code class="code-voice">        <span class="c">// This is an example of a functional test case.</span></code></li>
            <li><code class="code-voice">        <span class="c">// Use XCTAssert and related functions to verify your tests produce the correct results.</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">testPerformanceExample</span>() {</code></li>
            <li><code class="code-voice">        <span class="c">// This is an example of a performance test case.</span></code></li>
            <li><code class="code-voice">        <span class="kt">self</span>.<span class="vc">measure</span> {</code></li>
            <li><code class="code-voice">            <span class="c">// Put the code you want to measure the time of here.</span></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  The code starts by importing both the XCTest framework and your app.
</p><p class="para">
  Note that the code uses the <code class="code-voice">@testable</code> attribute when importing your app. This gives your tests access to the internal elements of your app’s code. Remember, Swift defaults to internal access control for all the types, variables, properties, initializers, and functions in your code. If you haven’t explicitly marked an item as file private or private, you can access it from your tests.
</p><p class="para">
  The XCTest framework is Xcode’s testing framework. The unit tests themselves are defined in a class, <code class="code-voice">FoodTrackerTests</code>, which inherits from <code class="code-voice">XCTestCase</code>. The code comments explain the <code class="code-voice">setUp()</code> and <code class="code-voice">tearDown()</code> methods, as well as the two sample test cases: <code class="code-voice">testExample()</code> and <code class="code-voice">testPerformanceExample()</code>.
</p><p class="para">
  The main types of tests you can write are functional tests (to check that everything is producing the values you expect) and performance tests (to check that your code is performing as fast as you expect it to). Because you haven’t written any performance-heavy code, you’ll only want to write functional tests for now.
</p><p class="para">
  Test cases are simply methods that the system automatically runs as part of your unit tests. To create a test case, create a method whose name starts with the word <em>test</em>. It’s best to give your test cases descriptive names. These names make it easier to identify individual tests later on. For example, a test that checks the <code class="code-voice">Meal</code> class’s initialization code could be named <code class="code-voice">testMealInitialization</code>.
</p><p class="para">
  <strong class="inline-head">To write a unit test for Meal object initialization</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">FoodTrackerTests.swift</code>, you don’t need to use any of the template’s stub methods for this lesson. Delete the template’s methods. Your food tracker tests should appear as shown below: 
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">import</span> <span class="vc">XCTest</span></code></li>
            <li><code class="code-voice"><span class="kt">@testable</span> <span class="kt">import</span> <span class="vc">FoodTracker</span></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">FoodTrackerTests</span>: <span class="n"><!-- a href="" -->XCTestCase<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  
</p>
</li><li class="item"><p class="para">
  Before the last curly brace (<code class="code-voice">}</code>), add the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">//MARK: Meal Class Tests</span></code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  This is a comment to help you (and anybody else who reads your code) navigate through your tests and identify what they correspond to.
</p>
</li><li class="item"><p class="para">
  Below the comment, add a new test case:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Confirm that the Meal initializer returns a Meal object when passed valid parameters.</span></code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">testMealInitializationSucceeds</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  The system automatically runs this test case when the unit tests are run.
</p>
</li><li class="item"><p class="para">
  Add tests to the test case that use both no rating and the highest positive rating.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Zero rating</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">zeroRatingMeal</span> = <span class="vc">Meal</span>.<span class="kt">init</span>(<span class="vc">name</span>: <span class="s">"Zero"</span>, <span class="vc">photo</span>: <span class="kt">nil</span>, <span class="vc">rating</span>: <span class="m">0</span>)</code></li>
            <li><code class="code-voice"><span class="vc">XCTAssertNotNil</span>(<span class="vc">zeroRatingMeal</span>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="c">// Highest positive rating</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">positiveRatingMeal</span> = <span class="vc">Meal</span>.<span class="kt">init</span>(<span class="vc">name</span>: <span class="s">"Positive"</span>, <span class="vc">photo</span>: <span class="kt">nil</span>, <span class="vc">rating</span>: <span class="m">5</span>)</code></li>
            <li><code class="code-voice"><span class="vc">XCTAssertNotNil</span>(<span class="vc">positiveRatingMeal</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  If the initializer is working as expected, these calls to<code class="code-voice"> init(name:, photo:, rating:)</code> should succeed. <code class="code-voice">XCTAssertNotNil</code> verifies this, by checking that the returned <code class="code-voice">Meal</code> object is not <code class="code-voice">nil</code>.
</p>
</li><li class="item"><p class="para">
  Now add a test case where the <code class="code-voice">Meal</code> class’s initialization should fail. Add the following method under the <code class="code-voice">testMealInitializationSucceeds()</code> method.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Confirm that the Meal initialier returns nil when passed a negative rating or an empty name.</span></code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">testMealInitializationFails</span>() {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  Again, the system automatically runs this test case when the unit tests are run.
</p>
</li><li class="item"><p class="para">
  Now add tests to the test case that calls the initializer with invalid parameters.
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Negative rating</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">negativeRatingMeal</span> = <span class="vc">Meal</span>.<span class="kt">init</span>(<span class="vc">name</span>: <span class="s">"Negative"</span>, <span class="vc">photo</span>: <span class="kt">nil</span>, <span class="vc">rating</span>: <span class="m">-1</span>)</code></li>
            <li><code class="code-voice"><span class="vc">XCTAssertNil</span>(<span class="vc">negativeRatingMeal</span>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="c">// Empty String</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">emptyStringMeal</span> = <span class="vc">Meal</span>.<span class="kt">init</span>(<span class="vc">name</span>: <span class="s">""</span>, <span class="vc">photo</span>: <span class="kt">nil</span>, <span class="vc">rating</span>: <span class="m">0</span>)</code></li>
            <li><code class="code-voice"><span class="vc">XCTAssertNil</span>(<span class="vc">emptyStringMeal</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  If the initializer is working as expected, these calls to<code class="code-voice"> init(name:, photo:, rating:)</code> should fail. <code class="code-voice">XCTAssertNil</code> verifies this by checking that the returned <code class="code-voice">Meal</code> object is <code class="code-voice">nil</code>.
</p>
</li><li class="item"><p class="para">
  So far, all of the tests should succeed. Now add a test that will fail. Add the following code between the negative rating and the empty string tests:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Rating exceeds maximum</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">largeRatingMeal</span> = <span class="vc">Meal</span>.<span class="kt">init</span>(<span class="vc">name</span>: <span class="s">"Large"</span>, <span class="vc">photo</span>: <span class="kt">nil</span>, <span class="vc">rating</span>: <span class="m">6</span>)</code></li>
            <li><code class="code-voice"><span class="vc">XCTAssertNil</span>(<span class="vc">largeRatingMeal</span>)</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  Your unit test class should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">class</span> <span class="vc">FoodTrackerTests</span>: <span class="n"><!-- a href="" -->XCTestCase<!-- /a --></span> {</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  You can add additional <code class="code-voice">XCTestCase</code> subclasses to your FoodTrackerTests target to add additional test cases. Run all of your unit tests at the same time by choosing Product &gt; Test (or pressing Command-U). You can also run an individual test.
</p><p class="para">
  <em>Checkpoint</em>: Run your unit tests by selecting the Product &gt; Test menu item. The <code class="code-voice">testMealInitializationSucceeds()</code> test case should succeed, while the <code class="code-voice">testMealInitializationFails()</code> test case fails.
</p><p class="para">
  Notice that Xcode automatically opens the Test navigator on the left, and highlights the test that failed.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/DYDM_failtest_2x.png" alt="image: ../Art/DYDM_failtest_2x.png" width="611" height="341">
</figure><p class="para">
  The editor window shows the results of the currently open file. In this case, a test case fails if one or more of its test methods fail. A test method fails if one or more of its tests fail. In this example, only the <code class="code-voice">XCTAssertNil(largeRatingMeal)</code> test actually failed.
</p><p class="para">
  The Test navigator also lists the individual test methods, grouped by test case. Click the test method to navigate to its code in the editor. The icon to the right shows whether the test method succeeded or failed. You can rerun a test method by moving the mouse over the success or failure icon. When it turns into a play arrow icon, click it.
</p><p class="para">
  As you see, unit testing helps catch errors in your code. They also help to define your class’s expected behavior. In this case, the Meal class’s initializer fails if you pass an empty string or a negative rating, but doesn’t fail if you pass a rating greater than 5. Go back and fix that.
</p><p class="para">
  <strong class="inline-head">To fix the error</strong>
</p><ol class="list-number">
  <li class="item"><p class="para">
  In <code class="code-voice">Meal.swift</code>, find the <code class="code-voice">init?(name:, photo:, rating:)</code> method.
</p>
</li><li class="item"><p class="para">
  You could modify the <code class="code-voice">if</code> clause, but complex Boolean expressions get hard to understand. Instead, replace it with a series of checks. Furthermore, because you are validating data before letting code execute, use <span class="x-name"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/GlossaryDefinitions.html#//apple_ref/doc/uid/TP40015214-CH12-SW130" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH12-SW130" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/G_15&quot;;return this.s_oc?this.s_oc(e):true">guard</a></span> statements.
</p>
<p class="para">
  A <code class="code-voice">guard</code> statement declares a condition that must be true in order for the code after the <code class="code-voice">guard</code> statement to be executed. If the condition is <code class="code-voice">false</code>, the <code class="code-voice">guard</code> statement’s <code class="code-voice">else</code> branch must exit the current code block (for example, by calling <code class="code-voice">return</code>, <code class="code-voice">break</code>, <code class="code-voice">continue</code>, <code class="code-voice">throw</code>, or a method that doesn’t return like <code class="code-voice">fatalError(_:file:line:)</code>).
</p>
<p class="para">
  Replace this code:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// Initialization should fail if there is no name or if the rating is negative.</span></code></li>
            <li><code class="code-voice"><span class="kt">if</span> <span class="vc">name</span>.<span class="vc">isEmpty</span> || <span class="vc">rating</span> &lt; <span class="m">0</span>  {</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">
  With the following:
</p>
<section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="c">// The name must not be empty</span></code></li>
            <li><code class="code-voice"><span class="kt">guard</span> !<span class="vc">name</span>.<span class="vc">isEmpty</span> <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="c">// The rating must be between 0 and 5 inclusively</span></code></li>
            <li><code class="code-voice"><span class="kt">guard</span> (<span class="vc">rating</span> &gt;= <span class="m">0</span>) &amp;&amp; (<span class="vc">rating</span> &lt;= <span class="m">5</span>) <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
</li>
</ol><p class="para">
  Your <code class="code-voice">init?(name:, photo:, rating:)</code> method should look like this:
</p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">init</span>?(<span class="vc">name</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span>, <span class="vc">photo</span>: <span class="n"><!-- a href="" -->UIImage<!-- /a --></span>?, <span class="vc">rating</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// The name must not be empty</span></code></li>
            <li><code class="code-voice">    <span class="kt">guard</span> !<span class="vc">name</span>.<span class="vc">isEmpty</span> <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// The rating must be between 0 and 5 inclusively</span></code></li>
            <li><code class="code-voice">    <span class="kt">guard</span> (<span class="vc">rating</span> &gt;= <span class="m">0</span>) &amp;&amp; (<span class="vc">rating</span> &lt;= <span class="m">5</span>) <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="c">// Initialize stored properties.</span></code></li>
            <li><code class="code-voice">    <span class="kt">self</span>.<span class="vc">name</span> = <span class="vc">name</span></code></li>
            <li><code class="code-voice">    <span class="kt">self</span>.<span class="vc">photo</span> = <span class="vc">photo</span></code></li>
            <li><code class="code-voice">    <span class="kt">self</span>.<span class="vc">rating</span> = <span class="vc">rating</span></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  <em>Checkpoint</em>: Your app runs with the unit test you just wrote. All test cases should pass.
</p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/DYDM_passtest_2x.png" alt="image: ../Art/DYDM_passtest_2x.png" width="680" height="409">
</figure><p class="para">
  Unit testing is an essential part of writing code because it helps you catch errors that you might otherwise overlook. As implied by their name, it’s important to keep unit tests modular. Each test should check for a specific, basic type of behavior. If you write unit tests that are long or complicated, it’ll be harder to track down exactly what’s going wrong.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40015214-CH20-DontLinkElementID_5"></a>
  <h3 class="section-name" tabindex="0">Wrapping Up</h3>
  <p class="para">
  In this lesson, you built a model class to hold your app’s data. You also examined the difference between regular initializers and failable initializers. Finally, you added a couple of unit tests to help you find and fix bugs in your code.
</p><p class="para">
  In later lessons, you will use model objects in your app’s code to create and manage the list of meals. However, before you do that, you need to learn how to display a list of meals using a table view.
</p><div class="note">
  <a name="//apple_ref/doc/uid/TP40015214-CH20-DontLinkElementID_21"></a>
  <aside class="aside">
    <p class="aside-title">Note
    </p>
    	<p class="para">To see the completed sample project for this lesson, download the file and view it in Xcode.
    	</p>
    <p class="para">
  <img class="inline-graphic" src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/WWDR_download_icon_withPadding_2x.png" alt="image: ../Art/WWDR_download_icon_withPadding_2x.png" width="15" height="17"><a href="https://developer.apple.com/sample-code/swift/downloads/05_DefineYourDataModel.zip" onclick="s_objectID=&quot;https://developer.apple.com/sample-code/swift/downloads/05_DefineYourDataModel.zip_1&quot;;return this.s_oc?this.s_oc(e):true">Download File</a>
</p>

  </aside>
</div>
  
</section>


 	<section id="next_previous" class="">
    		<p class="previous-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ImplementingACustomControl.html#//apple_ref/doc/uid/TP40015214-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/I_4&quot;;return this.s_oc?this.s_oc(e):true">Implement a Custom Control</a></p>
  			<p class="next-link"><a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH8-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/C_4&quot;;return this.s_oc?this.s_oc(e):true">Create a Table View</a></p>

    <p class="copyright">Copyright © 2018 Apple Inc. All rights reserved. 
  <a class="link" href="http://www.apple.com/legal/terms/site.html" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/legal/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true">Terms of Use</a> | 
  <a class="link" href="http://www.apple.com/privacy/" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true">Privacy Policy</a> | 
  <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/RevisionHistory.html#//apple_ref/doc/uid/TP40015214-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40015214-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/R_5&quot;;return this.s_oc?this.s_oc(e):true">Updated: 2016-12-08</a>
</p>
  </section>
</article>

    </div>
    <div id="big_button"></div>
    <footer id="footer">
  <script src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/devpubs-1.6.3.js" type="text/javascript" charset="utf-8"></script>
  <div id="_omniture_top">
<!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
<script type="text/javascript">
/* RSID: */
var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
</script>

<script type="text/javascript" src="./Start Developing iOS Apps (Swift)_ Define Your Data Model_files/s_code_h.js"></script>
<script type="text/javascript">
s.pageName=AC.Tracking.pageName();
s.channel="www.us.developer"

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code=s.t();if(s_code)document.write(s_code)</script>
<!-- End SiteCatalyst code version: H.8. -->
</div>

</footer>

    
  
    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback…</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We’re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/DefineYourDataModel.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect"> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples"> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art"> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo"> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send">

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>



</body></html>